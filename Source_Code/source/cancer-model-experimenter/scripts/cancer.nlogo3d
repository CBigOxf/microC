extensions [nw table array profiler]
directed-link-breed [influences influence]
;; This file was generated by the Behaviour Composer at modelling4all.org on Thu Apr 05 10:35:31 UTC 2018
;; The model can be found at http://794-dot-m4a-gae-hrd.appspot.com//m/?frozen=eEnOGeSQKI6dJYl2uQ785b
;; This is a 3D model that needs to be run by the 3D versioni of NetLogo.

breed [objects object]

turtles-own [
 scheduled-behaviours behaviours-at-tick-start current-behaviours current-behaviour behaviour-removals rules
 kind dead dirty
 my-previous-visual-events
 my-mutation-group
 my-nodes
 my-id
 my-cell
 my-active
 my-active-change-count
 my-table-of-mutations
 my-list
 my-fate
 my-cell-id
 my-last-node
 my-necrosis-counted?
 my-network-steps
 my-network-decision?
 my-influence-links
 my-activation-threshold
 my-growth-arrest-cycle
 my-rule
 my-consumed?
 my-shape
 my-list-of-parameters
 my-parameter
 ]

patches-own [
  inputs-of-patch
  oxygen-of-patch
  substances-of-patch
  temp-substances-of-patch
  production-of-patch
  consumption-of-patch
  sparse-neighbor-of-patch
  members-of-patch
  log-patch-attributes]

links-own [sign-of-link cell-of-link ]

breed [pens pen]

globals [
 the-minimum-x
 the-maximum-x
 the-minimum-y
 the-maximum-y
 the-default-colors
 the-order-of-mutations
 the-default-size
 the-previous-whos
 the-apoptosis-count
 the-previous-apoptosis-count
 the-growth_arrest-count
 the-previous-growth_arrest-count
 the-proliferation-count
 the-previous-proliferation-count
 the-necrosis-count
 the-previous-necrosis-count
 the-next-cell-id
 the-world-3d?
 the-xmin-of-canvas
 the-xmax-of-canvas
 the-ymin-of-canvas
 the-ymax-of-canvas
 the-zmin-of-canvas
 the-zmax-of-canvas
 the-dp
 the-counter
 the-start-time
 the-maximum-number-of-ticks
 the-parameters
 the-mutation-names
 the-replicates-remaining ;; When developing (not running on the ARC cluster) then each node should do several replicates.
 the-run-is-finished
 the-cell-events-file-name
 the-preface-printed
 the-number-of-replicates
 the-initial-group-ids
 the-mutation-percent
 the-mutated-genes
 the-table-of-input-parameters
 the-table-of-associations
 the-table-of-diffusion-parameters
 the-proliferation-delay
 the-batch-mode? ;; Define a parameter whose value is either true or false (optionally controlled by a switch to toggle the value at run time).
 the-apoptosis-step
 the-apoptosis-count-list
 the-proliferation-count-list
 the-growth_arrest-count-list
 the-necrosis-count-list
 the-cell-count-list
 the-growth-arrest-cycle
 the-reversible? ;; Define a parameter whose value is either true or false (optionally controlled by a switch to toggle the value at run time).
 the-network-growth_arrest-count
 the-table-of-substances
 the-table-of-inputs
 the-substances
 the-dx
 the-numerical-dc
 the-numerical-dc-factor
 the-dt
 the-optimal-oxygen
 the-necrosis-threshold-f
 the-old-oxygen-list
 the-steady-state?
 the-steady-state-accuracy
 the-fraction-of-hypoxic-threshold
 the-activation-profile

; The following are needed by the Behaviour Composer
 time cycle-finish-time behind-schedule times-scheduled frame-duration delta-t stop-running
 world-geometry mean-x mean-y mean-z plotting-commands histogram-plotting-commands
 behaviour-procedure-numbers behaviour-names internal-the-other
 button-command radian need-to-clear-drawing
 observer-commands
 objects-with-something-to-do
 maximum-plot-generations plot-generation
 prototypes total-time
 update-patch-attributes-needed
 state-restored-after-setup
 temp
]

to the-model [ globals-not-to-be-initialised ]
   initialise-globals globals-not-to-be-initialised
   create-objects 1
                  [ set kind
                        "Event logging"
                    initialise-object
                    set hidden? true ]
   create-objects 1
                  [ set kind
                        "World 3D"
                    initialise-object
                    set hidden? true ]
   create-objects 1
                  [ set kind
                        "Import Data"
                    initialise-object
                    set hidden? true ]

   create-objects 1
                  [ set kind
                        "Micro environment"
                    initialise-object
                    set hidden? true ]
   create-objects 1
                  [ set kind
                        "Observer"
                    initialise-object
                    set hidden? true ]
   create-objects 1
                  [ set kind
                        "Export Data"
                    initialise-object
                    set hidden? true ]
   ask all-of-kind "Event logging"
       [ -START-TIME-2
         -MAXIMUM-TICKS-19
         -READ-PARAMETERS-10
         -READ-MUTATION-NAMES-8
         -NEW-RANDOM-NUMBERS-2
         -RUN-NOT-FINISHED-INITIALLY--2
         -RUN-FINISHED--6
         -MINIMUM-X-4
         -MAXIMUM-X-2
         -MINIMUM-Y-1
         -MAXIMUM-Y-1
         -INITIALISE-PREVIOUS-STATE-2
         -PREFACE-PRINTED-3
         -LOG-CELL-EVENTS-18
         -LOG-STATISTICS-1
         -LOG-GENE-ACTIVATION-STATISTICS-7
         -RUN-NEXT-REPLICATE-UPDATED-WITH-GENE-STATE-CHANGE-LOGGING--4
         -PRINT-FINAL-VALUES-V2-12
         -PAUSE-WHEN-MAXIMUM-CELL-COUNT-11
         -ADD-A-CELL-S-GRAPH-TO-EVENTS-LOG-21 ]

          create-objects the-initial-cell-count
                  [ set kind
                        "Cell"
                    initialise-object ]



   ask all-of-kind "World 3D"
       [ -SIZE-OF-3D-CANVAS-4
         -WORLD-IS-3D-4
         -WORLD-GEOMETRY-37
         -LAYOUT-CELLS-IN-SPHERE-4 ]
   ask all-of-kind "Import Data"
       [ -READ-MUTATION-NAMES-15
         -INITIAL-GROUP-IDS-30
         -READ-INPUT-PARAMETERS-TXT-4
         -READ-ASSOCIATIONS-TXT-4
         -READ-DIFFUSION-PARAMETERS-TXT-3
         -PROLIFERATION-DELAY-11
         -THE-APOPTOSIS-STEP-2
         -SET-UP-COUNT-LISTS-7
         -ADD-MUTATIONS-FILE-CONTENT-TO-LOG-FILE-2
         -ADD-ASSOCIATIONS-FILE-CONTENT-TO-LOG-FILE-2
         -ADD-DIFFUSION-FILE-CONTENT-TO-LOG-FILE-2
         -ADD-INPUT-PARAMETERS-FILE-CONTENT-TO-LOG-FILE-2
         -ADD-REGULATORYGRAPH-HTML-CONTENT-TO-LOG-FILE-5 ]
   ask all-of-kind "Cell"
       [ -CELL-ID-6
         -CELL-APPEARANCE-5
         -CELL-PARAMETERS-9
         -LOAD-GRAPH-41
         -INTRODUCE-MUTATION-3
         -ASSOCIATE-NETWORK-ELEMENTS-2
         -LABEL-NODES-6
         -DISTINGUISH-INPUT-AND-OUTPUT-13
         -PROCESS-MY-RULE-16
         -PROCESS-MY-PARAMETER-7
         -NEGATIVE-LINKS-ARE-RED-6
         -POSITIVE-LINKS-ARE-GREEN-9
         -INITIALISE-GENES-8
         -INITIALISE-INPUT-NODES-3
         -INITIALISE-OUTPUT-NODES-3
         -INITIALISE-OUTPUT-FATE-3
         -NETWORK-LAYOUT-4
         -UPDATE-INPUTS-15
         -UPDATE-OUTPUTS-2
         -RUN-MICRO-STEP-202
         -CELL-ACTIONS-78 ]
   ask all-of-kind "Micro environment"
       [ -GLOBAL-TABLES-18
         -NUMERICAL-COEFFICIENTS-3
         -SET-MICRO-ENVIRONMENT-61
         -PROPERTIES-OF-SPARSE-PATCHES-32
         -SPARSE-DIFFUSION-47 ]
   ask all-of-kind "Observer"
       [ -HIDE-NETWORKS-19 ]
   ask all-of-kind "Export Data"
       [ -ACTIVATION-PROFILE-3 ]
end

to kind-initialisation [ kind-name ]
   if-else ( kind-name = "Event logging  Development settings" ) [ ]
           [ if-else ( kind-name = "Event logging" )
                     [ -START-TIME-2
                       -MAXIMUM-TICKS-19
                       -READ-PARAMETERS-10
                       -READ-MUTATION-NAMES-8
                       -NEW-RANDOM-NUMBERS-2
                       -RUN-NOT-FINISHED-INITIALLY--2
                       -RUN-FINISHED--6
                       -MINIMUM-X-4
                       -MAXIMUM-X-2
                       -MINIMUM-Y-1
                       -MAXIMUM-Y-1
                       -INITIALISE-PREVIOUS-STATE-2
                       -PREFACE-PRINTED-3
                       -LOG-CELL-EVENTS-18
                       -LOG-STATISTICS-1
                       -LOG-GENE-ACTIVATION-STATISTICS-7
                       -RUN-NEXT-REPLICATE-UPDATED-WITH-GENE-STATE-CHANGE-LOGGING--4
                       -PRINT-FINAL-VALUES-V2-12
                       -PAUSE-WHEN-MAXIMUM-CELL-COUNT-11
                       -ADD-A-CELL-S-GRAPH-TO-EVENTS-LOG-21 ]
                     [ if-else ( kind-name = "World 3D" )
                               [ -SIZE-OF-3D-CANVAS-4
                                 -WORLD-IS-3D-4
                                 -WORLD-GEOMETRY-37
                                 -LAYOUT-CELLS-IN-SPHERE-4 ]
                               [ if-else ( kind-name = "World 2D" ) [ ]
                                         [ if-else ( kind-name = "Import Data" )
                                                   [ -READ-MUTATION-NAMES-15
                                                     -INITIAL-GROUP-IDS-30
                                                     -READ-INPUT-PARAMETERS-TXT-4
                                                     -READ-ASSOCIATIONS-TXT-4
                                                     -READ-DIFFUSION-PARAMETERS-TXT-3
                                                     -PROLIFERATION-DELAY-11
                                                     -THE-APOPTOSIS-STEP-2
                                                     -SET-UP-COUNT-LISTS-7
                                                     -ADD-MUTATIONS-FILE-CONTENT-TO-LOG-FILE-2
                                                     -ADD-ASSOCIATIONS-FILE-CONTENT-TO-LOG-FILE-2
                                                     -ADD-DIFFUSION-FILE-CONTENT-TO-LOG-FILE-2
                                                     -ADD-INPUT-PARAMETERS-FILE-CONTENT-TO-LOG-FILE-2
                                                     -ADD-REGULATORYGRAPH-HTML-CONTENT-TO-LOG-FILE-5 ]
                                                   [ if-else ( kind-name = "Cell" )
                                                             [ -CELL-ID-6
                                                               -CELL-APPEARANCE-5
                                                               -CELL-PARAMETERS-9
                                                               -LOAD-GRAPH-41
                                                               -INTRODUCE-MUTATION-3
                                                               -ASSOCIATE-NETWORK-ELEMENTS-2
                                                               -LABEL-NODES-6
                                                               -DISTINGUISH-INPUT-AND-OUTPUT-13
                                                               -PROCESS-MY-RULE-16
                                                               -PROCESS-MY-PARAMETER-7
                                                               -NEGATIVE-LINKS-ARE-RED-6
                                                               -POSITIVE-LINKS-ARE-GREEN-9
                                                               -INITIALISE-GENES-8
                                                               -INITIALISE-INPUT-NODES-3
                                                               -INITIALISE-OUTPUT-NODES-3
                                                               -INITIALISE-OUTPUT-FATE-3
                                                               -NETWORK-LAYOUT-4
                                                               -UPDATE-INPUTS-15
                                                               -UPDATE-OUTPUTS-2
                                                               -RUN-MICRO-STEP-202
                                                               -CELL-ACTIONS-78 ]
                                                             [ if-else ( kind-name = "Gene" )
                                                                       [ -RANDOMLY-ACTIVE-73
                                                                         -APPLY-MUTATION-5
                                                                         -SHAPE-634
                                                                         -COLOR-934
                                                                         -SIZE-415 ]
                                                                       [ if-else ( kind-name = "Input" )
                                                                                 [ -ACTIVATION-THRESHOLD-4
                                                                                   -INACTIVE-8
                                                                                   -CONSUMPTION-3
                                                                                   -SHAPE-636
                                                                                   -COLOR-936
                                                                                   -SIZE-512 ]
                                                                                 [ if-else ( kind-name = "Output" )
                                                                                           [ -INACTIVE-1
                                                                                             -SHAPE-172
                                                                                             -COLOR-937
                                                                                             -SIZE-413 ]
                                                                                           [ if-else ( kind-name = "Output-Fate" )
                                                                                                     [ -INACTIVE-5 ]
                                                                                                     [ if-else ( kind-name = "Support" ) [ ]
                                                                                                               [ if-else ( kind-name = "Micro environment" )
                                                                                                                         [ -GLOBAL-TABLES-18
                                                                                                                           -NUMERICAL-COEFFICIENTS-3
                                                                                                                           -SET-MICRO-ENVIRONMENT-61
                                                                                                                           -PROPERTIES-OF-SPARSE-PATCHES-32
                                                                                                                           -SPARSE-DIFFUSION-47 ]
                                                                                                                         [ if-else ( kind-name = "Process Network" )
                                                                                                                                   [ -LABEL-NODES-6
                                                                                                                                     -DISTINGUISH-INPUT-AND-OUTPUT-13
                                                                                                                                     -PROCESS-MY-RULE-16
                                                                                                                                     -PROCESS-MY-PARAMETER-7
                                                                                                                                     -NEGATIVE-LINKS-ARE-RED-6
                                                                                                                                     -POSITIVE-LINKS-ARE-GREEN-9
                                                                                                                                     -INITIALISE-GENES-8
                                                                                                                                     -INITIALISE-INPUT-NODES-3
                                                                                                                                     -INITIALISE-OUTPUT-NODES-3
                                                                                                                                     -INITIALISE-OUTPUT-FATE-3 ]
                                                                                                                                   [ if-else ( kind-name
                                                                                                                                             = "Observer" )
                                                                                                                                             [ -HIDE-NETWORKS-19 ]
                                                                                                                                             [ if-else ( kind-name
                                                                                                                                                       = "Export Data" )
                                                                                                                                                       [ -ACTIVATION-PROFILE-3 ]
                                                                                                                                                       [ if-else ( kind-name
                                                                                                                                                                 =
                                                                                                                                                                 "Output behaviours"
                                                                                                                                                                 ) [ ]
                                                                                                                                                                 [ if-else ( kind-name
                                                                                                                                                                           =
                                                                                                                                                                           "Clonal Evolution"
                                                                                                                                                                           ) [ ]
                                                                                                                                                                           [ output-print ( word
                                                                                                                                                                                          "create-agent called with an unknown kind: "
                                                                                                                                                                                          kind-name
                                                                                                                                                                                          ) ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ] ]
end

 ; Support code for logging events for use in web pages.
to-report visual-events-of-all-of-kind [ kind-name
                                       ]
   let event-log
       "["
   let current-individuals
       all-of-kind kind-name
   if not any? current-individuals
      [ report "[]" ]
   set event-log
       additions-removals current-individuals event-log
   ask current-individuals
       [ let new-visual-events
             visual-events
         if new-visual-events != my-previous-visual-events
            [ set my-previous-visual-events
                  new-visual-events
              if event-log != "["
                 ;; need to add comma and new line before adding a new event

                 [ set event-log
                       ( word event-log ",\n" ) ]
              set event-log
                  ( word event-log ( butlast new-visual-events ) ", who: " who "}" ) ] ]
   report ( word event-log "]" )
end

to-report visual-events
                        ; add shape or orientation information if needed
   if ( xcor < the-minimum-x )
      [ set the-minimum-x
            xcor ]
   if ( xcor > the-maximum-x )
      [ set the-maximum-x
            xcor ]
   if ( ycor < the-minimum-y )
      [ set the-minimum-y
            ycor ]
   if ( ycor > the-maximum-y )
      [ set the-maximum-y
            ycor ]
   if-else ( the-default-colors = 0 )
           [ set the-default-colors
                 ( list color ) ]
           [ if ( not member? color the-default-colors )
                [ set the-default-colors
                      lput color the-default-colors ] ]
                      ; For reordering the default numbers
   if-else ( the-order-of-mutations = 0 )
           [ set the-order-of-mutations
                 ( list ( my-mutation-group - 1 ) ) ]
           [ if ( not member? ( my-mutation-group - 1 ) the-order-of-mutations )
                [ set the-order-of-mutations
                      lput ( my-mutation-group - 1 ) the-order-of-mutations ] ]
   let c
       ifelse-value ( my-mutation-group = 1 ) [ "" ] [ ( word "c: " ( my-mutation-group - 1 ) ", " ) ]
       ;  let color-index position color the-default-colors
       ;  let c ifelse-value (color-index = 0) [""] [(word "c: " color-index ", ")]
   if ( the-default-size = 0 )
      [ set the-default-size
            size ]
   let s
       ifelse-value ( size = the-default-size ) [ "" ] [ ( word " s: " size ", " ) ]
   let x
       ( word "x: " xcor ", " )
   let y
       ( word "y: " ycor )
   let z
       ifelse-value ( count all-of-kind "World 3D" = 0 ) [ "" ] [ ( word ", z: " zcor ) ]
   report ( word "{" c s x y z "}" )
end

to-report javascript-color [ c ]
   report ( word "'rgba(" item 0 c ", " item 1 c ", " item 2 c ", " precision ( item 3 c / 255 ) 2 ")'" )
end

to-report javascript-colors [ colors ]
   let array
       "["
   let index
       0
   while [ index + 1 < length colors ]
         [ set array
               ( word array javascript-color item index colors ", " )
           set index
               index + 1 ]
   set array
       ( word array javascript-color item index colors "]" )
   report array
end

to-report additions-removals [ current-individuals event-log ]
                             ;; sort the following so current-whos != the-previous-whos test is correct
   let current-whos
       map [ [ who ] of ? ] sort current-individuals
   if current-whos != the-previous-whos
      [ ask current-individuals
            [ if not member? who the-previous-whos
                 [ if event-log != "["
                      ;; need to add comma and new line before adding a new event

                      [ set event-log
                            ( word event-log ",\n" ) ]
                   set event-log
                       ( word event-log "{added: " who "}" ) ] ]
        forEach the-previous-whos
                [ if not member? ? current-whos
                     [ if event-log != "["
                          ;; need to add comma and new line before adding a new event

                          [ set event-log
                                ( word event-log ",\n" ) ]
                       set event-log
                           ( word event-log "{removed: " ? "}" ) ] ] ]
   set the-previous-whos
       current-whos
   report event-log
end

to-report new-statistics
   let changes
       [ ]
   if ( the-apoptosis-count != the-previous-apoptosis-count )
      [ set changes
            fput ( list "apoptosis" the-apoptosis-count ) changes
        set the-previous-apoptosis-count
            the-apoptosis-count ]
   if ( the-growth_arrest-count != the-previous-growth_arrest-count )
      [ set changes
            fput ( list "growth_arrest" the-growth_arrest-count ) changes
        set the-previous-growth_arrest-count
            the-growth_arrest-count ]
   if ( the-proliferation-count != the-previous-proliferation-count )
      [ set changes
            fput ( list "proliferation" the-proliferation-count ) changes
        set the-previous-proliferation-count
            the-proliferation-count ]
   if ( the-necrosis-count != the-previous-necrosis-count )
      [ set changes
            fput ( list "necrosis" the-necrosis-count ) changes
        set the-previous-necrosis-count
            the-necrosis-count ]
   if ( empty? changes )
      [ report changes ]
   let json
       "{"
   let index
       0
   let change
       [ ]
   while [ index + 1 < length changes ]
         [ set change
               item index changes
           set json
               ( word json item 0 change ": " item 1 change "," )
           set index
               index + 1 ]
               ;; could not use map primitive since last item doesn't end with a comma
   set change
       item index changes
   set json
       ( word json item 0 change ": " item 1 change "}" )
   report json
end

to-report gene-activation-statistics
   let statistics
       "{"
   let mutation-groups
       remove-duplicates [ my-mutation-group ] of all-of-kind "Cell"
   forEach mutation-groups
           [ ask one-of ( all-of-kind "Cell" ) with [ my-mutation-group = ? ]
                 [ set statistics
                       ( word statistics ? ": {" )
                   ask my-nodes
                       [ let id
                             my-id
                         let genes-with-this-id
                             ( all-of-kind "Gene" ) with [ my-id = id and [ my-mutation-group ] of my-cell = ? ]
                         if ( any? genes-with-this-id )
                            [ set statistics
                                  ( word statistics "'" id "': {a:" ( precision ( ( count genes-with-this-id with [ my-active ] ) / count genes-with-this-id ) 3 ) ",c:"
                                  ( precision ( mean [ my-active-change-count ] of genes-with-this-id ) 3 ) "},\n" ) ] ] ]
             set statistics
                 ( word butlast butlast statistics "},\n" ) ]
                 ;; butlasts remove final ,\n
   report ( word butlast butlast statistics "}" )
end

to-report one-of-each-mutation-group
   let mutation-groups
       remove-duplicates [ my-mutation-group ] of all-of-kind "Cell"
   let list-of-each
       map [ one-of ( all-of-kind "Cell" ) with [ my-mutation-group = ? ] ] mutation-groups
   report turtle-set list-of-each
end

 ; Lays out a set of agents centreed around the specified point. Places one agent per patch.
to layout-in-sphere [ agents center-x center-y center-z ]
   let radius
       0
   while [ any? agents ]
         [ set radius
               radius + 1
           let empty-patches-in-radius
               patches with [ not any? turtles-here and distancexyz center-x center-y center-z <= radius ]
           let agents-to-place
               0
           if-else ( count empty-patches-in-radius >= count agents )
                   [ set agents-to-place
                         agents
                     set agents
                         no-turtles ]
                   [ set agents-to-place
                         n-of ( count empty-patches-in-radius ) agents
                     set agents
                         agents with [ not member? self agents-to-place ] ]
           ask empty-patches-in-radius
               [ let agent
                     one-of agents-to-place
                 if ( agent != nobody )
                    [ ask agent
                          [ move-to myself ]
                      set agents-to-place
                          agents-to-place with [ self != agent ] ] ] ]
end

 ; 3D version includes a dummy 2D version that isn't called but occurs conditionally in the code
to-report load-graph [ file-name ]
   let new-object-list
       [ ] nw:load-graphml file-name [
                                       initialise-object
                                       set new-object-list
                                           lput self new-object-list ]
   report turtle-set new-object-list
end

 ; reports activation status of node. It's used with runresult to evaluate my-rule of node
to-report active-of [ node-id ]
   report [ first [ my-active ] of my-nodes with [ my-id = node-id ] ] of my-cell
end

 ; Lays out a list of agents in a horizontal line
to layout-line [ agent-list x last-x y ]
   if is-agentset? agent-list
      [ set agent-list
            [ self ] of agent-list ]
   if ( not empty? agent-list )
      [ if-else ( length agent-list > 1 )
                [ let increment
                      ( 1 + last-x - x ) / ( ( length agent-list ) - 1 )
                  forEach agent-list
                          [ ask ?
                                [ setxy x y ]
                            set x
                                x + increment ] ]
                [ ask first agent-list
                      [ setxy x y ] ] ]
end

 ; Each cell has a successive id.
to-report next-cell-id
   set the-next-cell-id
       the-next-cell-id + 1
   report the-next-cell-id
end

to-report boundary-patch?
   let boundary?
       nobody
   let cell-size
       2 * the-sparse-grid + 1
   if ( not the-world-3D? )
      [ set boundary?
            pxcor < the-xmin-of-canvas + cell-size or pxcor > the-xmax-of-canvas - cell-size or pycor < the-ymin-of-canvas + cell-size or pycor > the-ymax-of-canvas -
            cell-size ]
   if ( the-world-3D? )
      [ set boundary?
            pxcor < the-xmin-of-canvas + cell-size or pxcor > the-xmax-of-canvas - cell-size or pycor < the-ymin-of-canvas + cell-size or pycor > the-ymax-of-canvas -
            cell-size or pzcor < the-zmin-of-canvas + cell-size or pzcor > the-zmax-of-canvas - cell-size ]
   report boundary?
end

to-report central-patch?
   if ( not the-world-3D? )
      [ report ( ( pxcor ) mod ( 2 * the-sparse-grid + 1 ) = 0 and ( pycor ) mod ( 2 * the-sparse-grid + 1 ) = 0 ) ]
   if ( the-world-3D? )
      [ report ( ( pxcor ) mod ( 2 * the-sparse-grid + 1 ) = 0 and ( pycor ) mod ( 2 * the-sparse-grid + 1 ) = 0 and ( pzcor ) mod ( 2 * the-sparse-grid + 1 ) = 0
               ) ]
end

to-report neighbors-n [ n ]
   let px
       pxcor
   let py
       pycor
   let pz
       pzcor
   if ( not the-world-3D? )
      [ report patches with [ ( abs ( pxcor - px ) <= n ) and ( abs ( pycor - py ) <= n ) ] ]
   if ( the-world-3D? )
      [ report patches with [ ( abs ( pxcor - px ) <= n ) and ( abs ( pycor - py ) <= n ) and ( abs ( pzcor - pz ) <= n ) ] ]
end

to-report sparse-neighbors [ n ]
   let px
       pxcor
   let py
       pycor
   let pz
       pzcor
   if ( not the-world-3D? )
      [ report patches with [ ( abs ( pxcor - px ) = 2 * n + 1 and ( pycor = py ) ) or ( ( pxcor = px ) and abs ( pycor - py ) = 2 * n + 1 ) ] ]
   if ( the-world-3D? )
      [ report patches with [ ( abs ( pxcor - px ) = 2 * n + 1 and ( pycor = py ) and ( pzcor = pz ) ) or ( ( pxcor = px ) and abs ( pycor - py ) = 2 * n + 1 and ( pzcor
               = pz ) ) or ( ( pxcor = px ) and ( pycor = py ) and abs ( pzcor - pz ) = 2 * n + 1 ) ] ]
end

 ;to move-cell
 ;
 ;let empty-slot neighbors with [not any? objects-here with [kind = "Cell"]]
 ;if (any? empty-slot)[
 ;  move-to one-of empty-slot
 ;]
 ;if (not any? empty-slot)[
 ;
 ;  set heading growth-direction self
 ;  fd 1
 ;]
 ;
 ;end
 ;to-report growth-direction [cell]
 ;
 ;  if (xcor > 0 and ycor >= 0) [ ; first quarter
 ;    report one-of [0 90]
 ;  ]
 ;
 ;  if (xcor <= 0 and ycor > 0) [ ; second quarter
 ;    report one-of [0 270]
 ;  ]
 ;
 ;  if (xcor < 0 and ycor <= 0) [ ; third quarter
 ;    report one-of [180 270]
 ;  ]
 ;
 ;  if (xcor >= 0 and ycor < 0) [ ; forth quarter
 ;    report one-of [90 180]
 ;  ]
 ;
 ;  report one-of [0 90 180 270] ; this is in case the patch is 0 0
 ;
 ;end
to-report list-to-number [ x ]
   let y
       [ ]
   foreach x
           [ set y
                 lput read-from-string ? y ]
   report y
end

to-report agents-to-javascript [ kind-name ]
   let nodes
       ""
   ask my-nodes with [ kind = kind-name ]
       [ let js-node
             ( word "{id: " who ", label: \"" label "\"}" )
         if-else nodes = ""
                 [ set nodes
                       ( word "[\n" js-node ) ]
                 [ set nodes
                       ( word nodes ",\n" js-node ) ] ]
   report ( word nodes "\n]" )
end

to-report links-to-javascript [ influence-links ]
   let links-js
       ""
   ask influence-links
       [ let link-js
             ( word "{from: " [ who ] of end1 ", to: " [ who ] of end2 ", color: \"" ifelse-value ( sign-of-link = "positive" ) [ "green" ] [ "red" ] "\"}" )
         if-else ( links-js = "" )
                 [ set links-js
                       ( word "[\n" link-js ) ]
                 [ set links-js
                       ( word links-js ",\n" link-js ) ] ]
   report ( word links-js "\n]" )
end

to-report string-to-list [ s character ]
   if ( empty? s )
      [ report [ ] ]
   let next-character
       position character s
   if ( next-character = 0 )
      [ report ( string-to-list substring s 1 length s character ) ]
   if ( next-character = false )
      [ report ( list s ) ]
   report fput ( substring s 0 next-character ) string-to-list substring s next-character length s character
end

to-report string-starts-with? [ string start-string ]
   if ( length start-string > length string )
      [ report false ]
   report substring string 0 length start-string = start-string
end

to-report add-active-of-to-rule [ rule ]
   if ( empty? rule )
      [ report rule ]
   let first-character
       substring rule 0 1
   if ( first-character = " " or first-character = "(" or first-character = ")" )
      [ report ( word first-character add-active-of-to-rule ( substring rule 1 length rule ) ) ]
   if ( substring rule 0 2 = "or" )
      [ report ( word "or" add-active-of-to-rule substring rule 2 length rule ) ]
   let first-three-characters
       substring rule 0 3
   if ( first-three-characters = "and" or first-three-characters = "not" )
      [ report ( word first-three-characters add-active-of-to-rule substring rule 3 length rule ) ]
   let next-space
       position " " rule
   let next-close-paren
       position ")" rule
   let next-space-or-punctuation
       next-space
   if-else ( next-space = false )
           [ set next-space-or-punctuation
                 next-close-paren ]
           [ if ( next-close-paren != false and next-space > next-close-paren )
                [ set next-space-or-punctuation
                      next-close-paren ] ]
   if ( next-space-or-punctuation = false )
      [ report ( word "active-of \"" rule "\"" ) ]
               ; the rule is just the gene name
   report ( word "active-of \"" ( substring rule 0 next-space-or-punctuation ) "\"" ( add-active-of-to-rule ( substring rule next-space-or-punctuation length rule ) ) )
end

to-report reorder-list [ x
                       idx ]
   let x-new
       [ ]
   let index
       0
   foreach sort idx
           [ set index
                 position ? idx
             set x-new
                 lput ( item index x ) x-new ]
   report x-new
end

 ; Reporter for monitoring geometric properties through behavior composer (might need to be copy-pasted manually)
to-report state-of-nodes [ agent-set ]
   let list-of-nodes
       [ ]
   let list-of-cells
       [ who ] of agent-set
   foreach list-of-cells
           [ let list-item
                 [ my-id ] of first [ my-nodes with [ my-active = true ] ] of objects with [ who = ? ]
             set list-of-nodes
                 lput sort list-item list-of-nodes ]
   report ( list-of-nodes )
end

to -START-TIME-2
                 ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-start-time
       date-and-time
end

to -MAXIMUM-TICKS-19
                     ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-maximum-number-of-ticks
       1000
end

to -READ-PARAMETERS-10
                       ; note: objects are created before this module, so number of cells is read by the observer
   carefully [
               file-open "parameters.txt"
               set the-parameters
                   ""
               while [ not file-at-end? ]
                     [ let line
                           file-read-line
                       if ( not empty? line )
                          [ run line
                            let name-and-value
                                substring line 4 length line
                            let index
                                position " " name-and-value
                            let name
                                substring name-and-value 0 index
                            let value
                                substring name-and-value ( index + 1 ) length name-and-value
                            set the-parameters
                                ( word the-parameters "'" name "', " value "," ) ] ]
               file-close
               if not empty? the-parameters
                  ; remove the last comma

                     [ set the-parameters
                           butlast the-parameters ]
               set the-parameters
                   ( word "[" the-parameters "]" ) ]
                  [ print word "Error reading file: " "parameters.txt"
                    set stop-running
                        true ]
end

to -READ-MUTATION-NAMES-8
   set the-mutation-names
       [ ]
   carefully [
               if ( file-exists? the-file-of-mutations )
                  [ file-open the-file-of-mutations
                    let first-line
                        string-to-list file-read-line "\t"
                    set the-mutation-names
                        but-first first-line
                    file-close ] ] [
                                     print word "Error reading file: " the-file-of-mutations
                                     set stop-running
                                         true ]
end

to -NEW-RANDOM-NUMBERS-2 random-seed
   new-seed
end

to -RUN-NOT-FINISHED-INITIALLY--2
                                  ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-run-is-finished
       false
end

to -RUN-FINISHED--6
                    ; Set an attribute, parameter, or Netlogo variable to a new value.
   do-after ( 1 )
            task [ do-every ( 1 )
                            task [ let number-of-cells
                                       ( count all-of-kind "Cell" )
                                   set the-run-is-finished
                                       ticks > the-maximum-number-of-ticks
                                       ; or number-of-cells >= the-maximum-cell-count or number-of-cells = 0
 ] ]
end

to -MINIMUM-X-4
                ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-minimum-x
       999999
end

to -MAXIMUM-X-2
                ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-maximum-x
       -999999
end

to -MINIMUM-Y-1
                ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-minimum-y
       999999
end

to -MAXIMUM-Y-1
                ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-maximum-y
       -999999
end

to -INITIALISE-PREVIOUS-STATE-2
                                ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-previous-whos
       [ ]
end

to -PREFACE-PRINTED-3
                      ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-preface-printed
       true
end

to -LOG-CELL-EVENTS-18
   do-after ( 1.01 )
            task [ do-every ( 1 )
                            task [ let events
                                       ( visual-events-of-all-of-kind "Cell" )
                                   if ( events != "[]" and the-replicates-remaining > 0 )
                                      [ file-open the-cell-events-file-name
                                        file-print ( word "l[" ( round ticks ) "]=\n" events ";" )
                                        let index
                                            0
                                            ;foreach the-mutation-names
                                            ;        [file-print (word "mutation_names[" index "] = \"" ? "\";")
                                            ;         set index index + 1]
                                        file-close ] ] ]
end

to -LOG-STATISTICS-1
   do-after ( 1.01 )
            task [ do-every ( 1 )
                            task [ let statistics
                                       ( new-statistics )
                                   if ( statistics != [ ] and the-replicates-remaining > 0 )
                                      [ file-open the-cell-events-file-name
                                        file-print ( word "s[" ( round ticks ) "]=\n" statistics ";" )
                                        let index
                                            0
                                            ;foreach the-mutation-names
                                            ;        [file-print (word "mutation_names[" index "] = \"" ? "\";")
                                            ;         set index index + 1]
                                        file-close ] ] ]
end

to -LOG-GENE-ACTIVATION-STATISTICS-7
                                     ; Adds to log percentage of gene types active and how often they change state
   do-after ( 1.02 )
            task [ do-every ( the-intercellular-step )
                            task [ let statistics
                                       ( gene-activation-statistics )
                                   if ( statistics != [ ] and the-replicates-remaining > 0 )
                                      [ file-open the-cell-events-file-name
                                        file-print ( word "a[" ( round ticks ) "]=\n" statistics ";" )
                                        let index
                                            0
                                            ;foreach the-mutation-names
                                            ;        [file-print (word "mutation_names[" index "] = \"" ? "\";")
                                            ;         set index index + 1]
                                        file-close ] ] ]
end

to -RUN-NEXT-REPLICATE-UPDATED-WITH-GENE-STATE-CHANGE-LOGGING--4
   do-every ( 1 )
            task [ if ( the-replicates-remaining > 0 and the-run-is-finished )
                      [ do-after ( 1 )
                                 task [ file-open the-cell-events-file-name
                                        file-print ( word "replicates[replicate_counter++] = {l: l, s: s, a: a};\nl = [];\ns = [];\na = [];\n" )
                                        file-print ( word "minimum_x = Math.min(minimum_x, " the-minimum-x ");\nmaximum_x = Math.max(maximum_x, " the-maximum-x ");\nminimum_y = Math.min(minimum_y, " the-minimum-y
                                                   ");\nmaximum_y = Math.max(maximum_y, " the-maximum-y ");\n" )
                                        file-close
                                        run-in-observer-context task [ setup-except [ "the-cell-events-file-name" "the-replicates-remaining" "the-preface-printed" "the-default-colors"
                                                                "the-order-of-mutations" "the-default-size" ]
                                                                       set the-replicates-remaining
                                                                           the-replicates-remaining - 1 ] ] ] ]
end

to -PRINT-FINAL-VALUES-V2-12
                             ; Parameters and other values needed to the output web page.
                             ; replaced "the-default-colors" with "reorder-list the-default-colors the-order-of-mutations" (23/04/2017)
   when task [ the-replicates-remaining = 0 ]
        task [ file-open the-cell-events-file-name
               file-print ( word ";parameters = " the-parameters ";\nstart_time = '" the-start-time "';\nnumber_of_replicates_requested = " ( round the-number-of-replicates ) ";\ndefault_size = "
                          the-default-size ";\ndefault_colors = " javascript-colors reorder-list the-default-colors the-order-of-mutations ";\nrunning_3D = " ( any? all-of-kind
                          "World 3D" ) ";\n" )
               let index
                   0
               foreach the-mutation-names
                       [ file-print ( word "mutation_names[" index "] = \"" ? "\";" )
                         set index
                             index + 1 ]
               file-close ]
end

to -PAUSE-WHEN-MAXIMUM-CELL-COUNT-11
                                     ; Pause the execution of the simulation.
   do-every ( 1 )
            task [ if ( the-replicates-remaining = 0 )
                      [ do-after ( 2 )
                                 task [ set stop-running
                                            true ] ] ]
end

to -ADD-REGULATION-GRAPH-TO-EVENTS-LOG-30
   file-open the-cell-events-file-name
   file-print ( word "gene_nodes[" my-mutation-group "] = " ( agents-to-javascript "Gene" ) ";" )
   file-print ( word "input_nodes[" my-mutation-group "] = " ( agents-to-javascript "Input" ) ";" )
   file-print ( word "output_nodes[" my-mutation-group "] = " ( agents-to-javascript "Output" ) ";" )
   file-print ( word "links_between_nodes[" my-mutation-group "] = " ( links-to-javascript ( link-set [ my-out-links ] of my-nodes ) ) ";" )
   file-close
end

to -ADD-A-CELL-S-GRAPH-TO-EVENTS-LOG-21
                                        ; For each mutation group output a graph of nodes and edges when the run has finished.
   when task [ the-replicates-remaining = 0 ]
        task [ do-after ( .99 )
                        task [ ask one-of-each-mutation-group
                                   [ -ADD-REGULATION-GRAPH-TO-EVENTS-LOG-30 ] ] ]
end

to -SIZE-OF-3D-CANVAS-4
   set the-xmin-of-canvas
       -10
   set the-xmax-of-canvas
       10
   set the-ymin-of-canvas
       -10
   set the-ymax-of-canvas
       10
   set the-zmin-of-canvas
       -10
   set the-zmax-of-canvas
       10
end

to -WORLD-IS-3D-4
                  ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-world-3D?
       true
end

to -WORLD-GEOMETRY-37
                      ; Change the initial geometry of the world to be either a plane, a torus, a horizontal or vertical cylinder, or a plane with a camera
                      ;  that follows the average position of all individuals.
   set-world-geometry 4
end

to -LAYOUT-CELLS-IN-SPHERE-4
   layout-in-sphere all-of-kind "Cell" 0 0 0
end

to -READ-MUTATION-NAMES-15
   set the-mutation-names
       [ ]
   carefully [
               if ( file-exists? the-file-of-mutations )
                  [ file-open the-file-of-mutations
                    let first-line
                        string-to-list file-read-line "\t"
                    set the-mutation-names
                        but-first first-line
                    file-close ] ] [
                                     print word "Error reading file: " the-file-of-mutations
                                     set stop-running
                                         true ]
end

to -INITIAL-GROUP-IDS-30
   set the-initial-group-ids
       [ ]
   set the-mutation-percent
       [ ]
   set the-mutated-genes
       [ ]
   carefully [
               if ( file-exists? the-file-of-mutations )
                  [ file-open the-file-of-mutations
                    let first-line
                        string-to-list file-read-line "\t"
                    let second-line
                        string-to-list file-read-line "\t"
                    set second-line
                        remove-item 0 second-line
                        ; remove the word "Percent"
                    foreach ( second-line )
                            [ set the-mutation-percent
                                  lput ( read-from-string ? ) the-mutation-percent ]
                    while [ not file-at-end? ]
                          [
                          ;first and second line have already been read
 let current-line
                                string-to-list file-read-line "\t"
                            set the-mutated-genes
                                lput ( item 0 current-line ) the-mutated-genes ]
                    file-close
                    let group-id
                        1
                    foreach the-mutation-percent
                          [ let n-cells
                                ceiling ( ? * the-initial-cell-count / 100 )
                            while [ n-cells > 0 ]
                                  [ set the-initial-group-ids
                                        ( lput group-id the-initial-group-ids )
                                    set n-cells
                                        n-cells - 1 ]
                            set group-id
                                group-id + 1 ]
                    set the-initial-group-ids
                        shuffle the-initial-group-ids ]
               if ( not file-exists? the-file-of-mutations )
                  [ set the-initial-group-ids
                        n-values the-initial-cell-count [ 1 ] ] ] [
                                                                    print word "Error reading file: " the-file-of-mutations
                                                                    print "in module INITIAL-GROUP-IDS"
                                                                    set stop-running
                                                                        true ]
                                                                        ; OLD MODULE
                                                                        ;set the-initial-group-ids []
                                                                        ;set the-mutation-percent []
                                                                        ;set the-mutated-genes []
                                                                        ;
                                                                        ;carefully [
                                                                        ;if (file-exists? the-file-of-mutations) [
                                                                        ;   file-open the-file-of-mutations
                                                                        ;   let first-line string:rex-split file-read-line "\\ " ; the first line contains names and has already been read
                                                                        ;   let second-line string:rex-split file-read-line "\\ "
                                                                        ;   set second-line remove-item 0 second-line ; remove the word "Percent"
                                                                        ;
                                                                        ;   foreach (second-line) [
                                                                        ;      set the-mutation-percent lput (read-from-string ?) the-mutation-percent
                                                                        ;   ]
                                                                        ;
                                                                        ;   while [not file-at-end?] [ ;first line has already been read
                                                                        ;      let current-line string:rex-split file-read-line "\\ "
                                                                        ;      set the-mutated-genes lput (item 0 current-line) the-mutated-genes
                                                                        ;   ]
                                                                        ;
                                                                        ;   file-close
                                                                        ;   let group-id 1
                                                                        ;   foreach the-mutation-percent [
                                                                        ;      let n-cells ceiling (? * the-initial-cell-count)
                                                                        ;      while [n-cells > 0] [
                                                                        ;         set the-initial-group-ids (lput group-id the-initial-group-ids)
                                                                        ;         set n-cells n-cells - 1
                                                                        ;      ]
                                                                        ;
                                                                        ;     set group-id group-id + 1
                                                                        ;   ]
                                                                        ;   set the-initial-group-ids shuffle the-initial-group-ids
                                                                        ;]
                                                                        ;if(not file-exists? the-file-of-mutations)[
                                                                        ;   set the-initial-group-ids n-values the-initial-cell-count [1]
                                                                        ;]
                                                                        ;] [print word "Error reading file: " the-file-of-mutations set stop-running true]
end

to -READ-INPUT-PARAMETERS-TXT-4
   set the-table-of-input-parameters
       table:make
   carefully [
               file-open the-input-parameters-file
               if ( not file-at-end? )
                  [ let first-line
                        string-to-list file-read-line "\t" ]
                        ; ignore first line (names of variables)
               while [ not file-at-end? ]
                     [ let current-line
                           string-to-list file-read-line "\t" table:put the-table-of-input-parameters first current-line list-to-number but-first current-line ]
               file-close ]
                     [ print word
                             "Error reading file: " the-input-parameters-file
                       set stop-running
                           true ]
                           ; OLD MODULE
                           ;set the-table-of-input-parameters table:make
                           ;carefully [
                           ;file-open the-input-parameters-file
                           ;   let counter 1
                           ;
                           ;   while [not file-at-end?] [
                           ;      let current-line string:rex-split file-read-line "\\ "
                           ;      table:put the-table-of-input-parameters first current-line list-to-number but-first current-line
                           ;   ]
                           ;
                           ;file-close
                           ;] [print word "Error reading file: " the-input-parameters-file set stop-running true]
end

to -READ-ASSOCIATIONS-TXT-4
   set the-table-of-associations
       table:make
   carefully [
               file-open the-associations-file
               if ( not file-at-end? )
                  [ let first-line
                        string-to-list file-read-line "\t" ]
                        ; ignore first line (names of variables)
               while [ not file-at-end? ]
                     [ let current-line
                           string-to-list file-read-line "\t"
                       if ( last current-line = "NA" ) [ table:put the-table-of-associations first current-line "" ]
                       if ( last current-line != "NA" ) [ table:put the-table-of-associations first current-line last current-line ] ]
               file-close ]
                          [ print word "Error reading file: " the-associations-file
                            set stop-running
                                true ]
                                ;OLD MODULE
                                ;set the-table-of-associations table:make
                                ;carefully [
                                ;file-open the-associations-file
                                ;
                                ;while [not file-at-end?] [
                                ;   let current-line string:rex-split file-read-line "\\ "
                                ;   run ( word ( word "table:put the-table-of-associations " first current-line ) " " last current-line )
                                ;]
                                ;file-close
                                ;] [print word "Error reading file: " the-associations-file set stop-running true]
end

to -READ-DIFFUSION-PARAMETERS-TXT-3
   set the-table-of-diffusion-parameters
       table:make
   carefully [
               file-open the-diffusion-parameters-file
               if ( not file-at-end? )
                  [ let first-line
                        string-to-list file-read-line "\t" ]
                        ; ignore first line (names of variables)
               while [ not file-at-end? ]
                     [
                     ; empty files also work
 let current-line
                           string-to-list file-read-line "\t" table:put the-table-of-diffusion-parameters first current-line list-to-number but-first current-line ]
               file-close ]
                     [ print word
                             "Error reading file: " the-diffusion-parameters-file
                       set stop-running
                           true ]
end

to -PROLIFERATION-DELAY-11
                           ; Set an attribute, parameter, or Netlogo variable to a new value.
   do-every ( the-diffusion-step )
            task [ set the-proliferation-delay
                       ifelse-value ( the-batch-mode? ) [ 1 ] [ 1 + random the-intercellular-step ] ]
end

to -THE-APOPTOSIS-STEP-2
                         ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-apoptosis-step
       ifelse-value ( the-batch-mode? ) [ the-intercellular-step ] [ the-intracellular-step ]
end

to -SET-UP-COUNT-LISTS-7
   do-after ( 0.5 )
            task [ set the-apoptosis-count-list
                       [ ]
                   set the-proliferation-count-list
                       [ ]
                   set the-growth_arrest-count-list
                       [ ]
                   set the-necrosis-count-list
                       [ ]
                   set the-cell-count-list
                       [ ]
                   let n-cell-types
                       length the-mutation-names
                       ;this includes all mutations (initial and lagged ones)
                       ;max [my-mutation-group] of objects with [kind = "Cell"]
                   repeat n-cell-types
                          [ set the-apoptosis-count-list
                                lput 0 the-apoptosis-count-list ]
                   repeat n-cell-types
                          [ set the-proliferation-count-list
                                lput 0 the-proliferation-count-list ]
                   repeat n-cell-types
                          [ set the-growth_arrest-count-list
                                lput 0 the-growth_arrest-count-list ]
                   repeat n-cell-types
                          [ set the-necrosis-count-list
                                lput 0 the-necrosis-count-list ]
                   repeat n-cell-types
                          [ set the-cell-count-list
                                lput 0 the-cell-count-list ] ]
end

to -ADD-MUTATIONS-FILE-CONTENT-TO-LOG-FILE-2
                                             ; Copies the contents of mutations file to a JavaScript variable for display.
   do-after ( 1 )
            task [ let contents
                       ""
                   file-open the-file-of-mutations
                   while [ not file-at-end? ]
                         ;; break is interpreted as HTML so broken into two pieces below

                         [ set contents
                               ( word contents file-read-line "<" "br>" ) ]
                   file-close
                   file-open the-cell-events-file-name
                   file-print ( word "mutations_file_contents = '" contents "';" )
                   file-close ]
end

to -ADD-ASSOCIATIONS-FILE-CONTENT-TO-LOG-FILE-2
                                                ; Copies the contents of associations file to a JavaScript variable for display.
   do-after ( 1 )
            task [ let contents
                       ""
                   file-open the-associations-file
                   while [ not file-at-end? ]
                         ;; break is interpreted as HTML so broken into two pieces below

                         [ set contents
                               ( word contents file-read-line "<" "br>" ) ]
                   file-close
                   file-open the-cell-events-file-name
                   file-print ( word "associations_file_contents = '" contents "';" )
                   file-close ]
end

to -ADD-DIFFUSION-FILE-CONTENT-TO-LOG-FILE-2
                                             ; Copies the contents of diffusion file to a JavaScript variable for display.
   do-after ( 1 )
            task [ let contents
                       ""
                   file-open the-diffusion-parameters-file
                   while [ not file-at-end? ]
                         ;; break is interpreted as HTML so broken into two pieces below

                         [ set contents
                               ( word contents file-read-line "<" "br>" ) ]
                   file-close
                   file-open the-cell-events-file-name
                   file-print ( word "diffusion_file_contents = '" contents "';" )
                   file-close ]
end

to -ADD-INPUT-PARAMETERS-FILE-CONTENT-TO-LOG-FILE-2
                                                    ; Copies the contents of input parameters file to a JavaScript variable for display.
   do-after ( 1 )
            task [ let contents
                       ""
                   file-open the-input-parameters-file
                   while [ not file-at-end? ]
                         ;; break is interpreted as HTML so broken into two pieces below

                         [ set contents
                               ( word contents file-read-line "<" "br>" ) ]
                   file-close
                   file-open the-cell-events-file-name
                   file-print ( word "input_parameters_file_contents = '" contents "';" )
                   file-close ]
end

to -ADD-REGULATORYGRAPH-HTML-CONTENT-TO-LOG-FILE-5
                                                   ; Copies the contents of regulatoryGraph.html to a JavaScript variable for display.
   do-after ( 1 )
            task [ let contents
                       ""
                   file-open "regulatoryGraph.html"
                   while [ not file-at-end? ]
                         ; \\n so \n ends up in the file

                         [ set contents
                               ( word contents file-read-line "\\n" ) ]
                   file-close
                   file-open the-cell-events-file-name
                   file-print ( word "regulatory_graph_file_contents = '" contents "';" )
                   file-close ]
end

to -CELL-ID-6
              ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-cell-id
       next-cell-id
end

to -SHAPE-1810
               ; Change the appearance to one of the defined shapes.
   set shape
       "circle"
end

to -COLOR-3244
   do-after ( 0.01 )
            task [ let nt-color
                       6 + ( my-mutation-group - 1 ) * 10
                   let t-color
                       lput 180 extract-rgb nt-color
                   set color
                       t-color ]
end

to -LABEL-43
             ; Set an attribute, parameter, or Netlogo variable to a new value.
   if ( not ( the-world-3D? ) )
      [ set label
            my-cell-id ]
end

to -CELL-APPEARANCE-5
   -SHAPE-1810
   -COLOR-3244
   -LABEL-43
end

to -FATE-7
           ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-fate
       nobody
end

to -LAST-NODE-12
                 ; Set an attribute, parameter, or Netlogo variable to a new value.
   do-after ( 0.1 )
            task [ set my-last-node
                       ifelse-value ( one-of my-nodes with [ kind = "Input" ] = nobody ) [ one-of my-nodes with [ kind = "Gene" ] ] [ one-of my-nodes with [ kind =
                       "Input" ] ] ]
end

to -NECROSIS-COUNTED--2
                        ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-necrosis-counted?
       false
end

to -NETWORK-STEPS-1
                    ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-network-steps
       0
end

to -NETWORK-DECISION--1
                        ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-network-decision?
       false
end

to -CELL-PARAMETERS-9
                      ; Add a list of behaviours
                      ; (a way to package up several behaviours into a single unit).
   -FATE-7
   -LAST-NODE-12
   -NECROSIS-COUNTED--2
   -NETWORK-STEPS-1
   -NETWORK-DECISION--1
end

to -LOAD-GRAPH-41
                  ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-nodes
       load-graph "regulatoryGraph.html"
end

to -INTRODUCE-MUTATION-3
                         ; Turns data in mutation.txt into table specific to each cell. The data in the file are interpreted as probabilities (negative values mean random gene status).
   set my-mutation-group
       ifelse-value ( my-cell-id <= the-initial-cell-count ) [ item ( my-cell-id - 1 ) the-initial-group-ids ] [ 1 ]
   set my-table-of-mutations
       table:make
   let table-of-probability
       table:make
   let rand-number
       random-float 1
   carefully [
               if ( file-exists? the-file-of-mutations )
                  [ file-open the-file-of-mutations
                    let counter
                        1
                    while [ not file-at-end? ]
                          [ let current-line
                                string-to-list file-read-line "\t"
                            if ( counter > 2 )
                               [
                               ; skip the first and second line (Names and Percentages)
 let current-gene
                                     item 0 current-line
                                 let current-probability
                                     item my-mutation-group current-line
                                 if ( current-probability != "NA" )
                                    [ set current-probability
                                          read-from-string current-probability
                                          ; all values are strings till now
                                      let active-status
                                          ifelse-value ( rand-number < current-probability ) [ 1 ] [ 0 ] table:put ( my-table-of-mutations ) ( current-gene ) active-status table:put
                                          table-of-probability current-gene current-probability ] ]
                            set counter
                                counter + 1 ]
                    file-close ] ] [
                                     print word "Error reading file: " the-file-of-mutations
                                     print "module: INTRODUCE-MUTATION"
                                     set stop-running
                                         true ]
                                         ; OLD MODULE: using string library, files split by spaces and negative numbers
                                         ;set my-mutation-group ifelse-value (my-cell-id <= the-initial-cell-count) [item (my-cell-id - 1) the-initial-group-ids][1]
                                         ;set my-table-of-mutations table:make
                                         ;let table-of-probability table:make
                                         ;let rand-number random-float 1
                                         ;carefully [
                                         ;if(file-exists? the-file-of-mutations) [
                                         ;
                                         ;   file-open the-file-of-mutations
                                         ;   let counter 1
                                         ;   while [not file-at-end?] [
                                         ;
                                         ;      let current-line string:rex-split file-read-line "\\ "
                                         ;
                                         ;      if (counter > 2) [ ; skip the first and second line (Names and Percentages)
                                         ;         let current-gene item 0 current-line
                                         ;         let current-probability read-from-string item my-mutation-group current-line
                                         ;
                                         ;         ; use -1 in case of negative number
                                         ;        ;let active-status ifelse-value ( current-probability < 0 ) [ -1 ] [ ifelse-value ( rand-number < current-probability ) [ 1 ] [ 0 ] ]
                                         ;        ; table:put ( my-table-of-mutations ) ( current-gene ) active-status
                                         ;         ; table:put table-of-probability current-gene current-probability
                                         ;
                                         ;         if (current-probability >= 0) [ ; ignore negative numbers (fixed bug: skipping all genes in the mutations list when simulating)
                                         ;           let active-status ifelse-value ( rand-number < current-probability ) [ 1 ] [ 0 ]
                                         ;           table:put ( my-table-of-mutations ) ( current-gene ) active-status
                                         ;           table:put table-of-probability current-gene current-probability
                                         ;         ]
                                         ;
                                         ;      ]
                                         ;
                                         ;      set counter counter + 1
                                         ;   ]
                                         ;
                                         ;   file-close
                                         ;]
                                         ;] [print word "Error reading file: " the-file-of-mutations set stop-running true]
end

to -RECORD-CELL-10
                   ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-cell
       myself
end

to -ASSOCIATE-GENES-WITH-CELL-7
                                ; Add a list of behaviours to another agent or set of agents.
   ask my-nodes
       [ -RECORD-CELL-10 ]
end

to -SET-INFLUENCES-10
                      ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-influence-links
       influences with [ ( [ my-cell ] of end1 = myself ) or ( [ my-cell ] of end2 = myself ) ]
end

to -RECORD-CELL-16
                   ; Set an attribute, parameter, or Netlogo variable to a new value.
   set cell-of-link
       myself
end

to -ASSOCIATE-INFLUENCES-WITH-CELL-8
                                     ; Add a list of behaviours to another agent or set of agents.
   ask my-influence-links
       [ -RECORD-CELL-16 ]
end

to -ASSOCIATE-NETWORK-ELEMENTS-2
                                 ; Add a list of behaviours
                                 ; (a way to package up several behaviours into a single unit).
   -ASSOCIATE-GENES-WITH-CELL-7
   -SET-INFLUENCES-10
   -ASSOCIATE-INFLUENCES-WITH-CELL-8
end

to -LAYOUT-GENES-76
                    ; Place a set of agents on a circle.
   layout-circle my-nodes with [ kind = "Gene" and not hidden? ] ifelse-value ( the-world-3D? ) [ 5 ] [ 16 ]
                 ; the ifelse-value (the-world-3D?) [5] [16] of the circle
end

to -MOVE-UP-15
               ; Set an attribute, parameter, or Netlogo variable to a new value.
   set ycor
       min ( list max-pycor ( ycor + 10 ) )
end

to -MOVE-GENES-UP-11
                     ; Because layout-circle is always at 0,0 this moves the circle out of the way of the cells.
   if ( not the-world-3D? )
      [ ask my-nodes with [ kind = "Gene" ]
            [ -MOVE-UP-15 ] ]
end

to -LAYOUT-INPUT-13
                    ; Spreads out agents in a horizontal line.
   layout-line ( my-nodes with [ kind = "Input" and not hidden? ] ) ( ifelse-value ( the-world-3D? ) [ min-pxcor + 2 ] [ min-pxcor + 6 ] ) ( ifelse-value ( the-world-3D? ) [ max-pxcor
               - 2 ] [ max-pxcor - 6 ] ) ( ifelse-value ( the-world-3D? ) [ max-pycor - 1 ] [ -5 + max-pycor ] )
end

to -LAYOUT-OUTPUT-14
                     ; Spreads out agents in a horizontal line.
   layout-line ( my-nodes with [ kind = "Output" and not hidden? ] ) ( ifelse-value ( the-world-3D? ) [ min-pxcor + 2 ] [ min-pxcor + 6 ] ) ( ifelse-value ( the-world-3D? ) [ max-pxcor
               - 2 ] [ max-pxcor - 6 ] ) ( ifelse-value ( the-world-3D? ) [ min-pycor + 1 ] [ 20 + min-pycor ] )
end

to -NETWORK-LAYOUT-4
                     ; Add a list of behaviours
                     ; (a way to package up several behaviours into a single unit).
   -LAYOUT-GENES-76
   -MOVE-GENES-UP-11
   -LAYOUT-INPUT-13
   -LAYOUT-OUTPUT-14
end

to -ACTIVE-FROM-PATCH-16
                         ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-active
       ( table:get [ inputs-of-patch ] of ( [ patch-here ] of my-cell ) my-id ) >= my-activation-threshold
end

to -UPDATE-SIZE-2
                  ; Set an attribute, parameter, or Netlogo variable to a new value.
   set size
       ifelse-value ( the-world-3D? ) [ ifelse-value my-active [ 0.75 ] [ 0.35 ] ] [ ifelse-value my-active [ 2 ] [ 1 ] ]
end

to -UPDATE-INPUTS-15
                     ; Add a list of behaviours to another agent or set of agents.
   do-after ( 0.01 )
            task [ do-every ( the-diffusion-step )
                            task [ ask my-nodes with [ kind = "Input" ]
                                       [ -ACTIVE-FROM-PATCH-16
                                         -UPDATE-SIZE-2 ] ] ]
end

to -UPDATE-SIZE-3
                  ; Set an attribute, parameter, or Netlogo variable to a new value.
   set size
       ifelse-value ( the-world-3D? ) [ ifelse-value my-active [ 0.75 ] [ 0.35 ] ] [ ifelse-value my-active [ 2 ] [ 1 ] ]
end

to -UPDATE-OUTPUTS-2
                     ; Add a list of behaviours to another agent or set of agents.
   do-after ( 0.01 )
            task [ do-every ( 1 )
                            task [ ask my-nodes with [ kind = "Output" ]
                                       [ -UPDATE-SIZE-3 ] ] ]
end

to -FATE-APOPTOSIS-55
                      ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-fate
       "Apoptosis"
end

to -FATE-GROWTH-ARREST-148
                           ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-fate
       "Growth_Arrest"
end

to -GROWTH-ARREST-CYCLE-171
                            ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-growth-arrest-cycle
       the-growth-arrest-cycle
end

to -LABEL-DECISION-2
                     ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-network-decision?
       true
end

to -FATE-PROLIFERATION-156
                           ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-fate
       "Proliferation"
end

to -FATE-NECROSIS-48
                     ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-fate
       "Necrosis"
end

to -BIG-221
            ; Change size of this agent.
   set size
       4
end

to -SMALL-232
              ; Change size of this agent.
   do-after ( .5 )
            task [ set size
                       ifelse-value ( the-world-3D? ) [ ifelse-value my-active [ 0.75 ] [ 0.35 ] ] [ ifelse-value my-active [ 2 ] [ 1 ] ] ]
end

to -BIG-THEN-SMALL-1316
                        ; Add a list of behaviours
                        ; (a way to package up several behaviours into a single unit).
   -BIG-221
   -SMALL-232
end

to -BIG-219
            ; Change size of this agent.
   set size
       4
end

to -SMALL-230
              ; Change size of this agent.
   do-after ( .5 )
            task [ set size
                       ifelse-value ( the-world-3D? ) [ ifelse-value my-active [ 0.75 ] [ 0.35 ] ] [ ifelse-value my-active [ 2 ] [ 1 ] ] ]
end

to -BIG-THEN-SMALL-1315
                        ; Add a list of behaviours
                        ; (a way to package up several behaviours into a single unit).
   -BIG-219
   -SMALL-230
end

to -THICK-465
              ; Set an attribute, parameter, or Netlogo variable to a new value.
   set thickness
       1
end

to -THIN-710
             ; Set an attribute, parameter, or Netlogo variable to a new value.
   set thickness
       0
end

to -INFLUENCE-LINK-END-WITH-LOGGING--36
                                        ; This is a simple model of gene activation/deactivation where the Boolean rule of a gene is run to determine if it is on or off. This version also logs changes.
   let current-fate
       0
   ask end2
       [ set current-fate
             [ my-fate ] of my-cell ]
   let previous-node
       end1
   ask end2
       [ let dummy
             active-of "ERK" ]
             ; this is just to force active-of into the model
   ask end2
       [ ask my-cell
             [ set my-network-steps
                   my-network-steps + 1 ]
         let new-state
             runresult my-rule
         if ( my-active != new-state and ( not member? label [ table:keys my-table-of-mutations ] of my-cell ) )
            ;CHANGED TO SKIP MUTATED GENES
            ;if (my-active != new-state) ; old line

            [ set my-active
                  new-state
              set my-active-change-count
                  my-active-change-count + 1
                  ;              file-open the-cell-events-file-name
                  ;              file-print (word "sc({tick: " (round ticks) ", id: " who ", on: " new-state ", cell: " [who] of my-cell ", link: " [who] of previous-node "});")
                  ;              file-close
 ] ]
   if ( [ kind ] of end2 = "Output-Fate" )
      [ if ( [ my-active ] of end2 )
           [
           ;cells have reached a fate
 if ( [ my-id ] of end2 = "Apoptosis" )
                [ ask [ my-cell ] of end2
                      [ -FATE-APOPTOSIS-55 ] ]
             if ( [ my-id ] of end2 = "Growth_Arrest" )
                [ ask [ my-cell ] of end2
                      [ -FATE-GROWTH-ARREST-148
                        -GROWTH-ARREST-CYCLE-171
                        -LABEL-DECISION-2 ] ]
             if ( [ my-id ] of end2 = "Proliferation" )
                [ ask [ my-cell ] of end2
                      [ -FATE-PROLIFERATION-156 ] ]
             if ( [ my-id ] of end2 = "Necrosis" )
                [ ask [ my-cell ] of end2
                      [ -FATE-NECROSIS-48 ] ]
                                          ;ask end2 [set my-active false] ; reset the output-fate node
 ]
        if ( ( not [ my-active ] of end2 ) and ( [ my-id ] of end2 = current-fate ) )
           [
           ; treats the no-decision as an active condition
 ask [ my-cell ] of end2
                 [ set my-fate
                       nobody ] ]
        ask end2
            [ set my-active
                  false ]
        ask cell-of-link
            [ set my-last-node
                  one-of my-nodes with [ kind = "Input" ] ] ]
   if ( [ kind ] of end2 = "Output" )
      [ ask cell-of-link
            [ set my-last-node
                  one-of my-nodes with [ kind = "Input" ] ] ]
   if ( [ kind ] of end2 = "Input" or [ kind ] of end2 = "Gene" )
      [
      ; remember the last node
 let current-node
            end2
        ask cell-of-link
            [ set my-last-node
                  current-node ] ]
   if ( not hidden? )
      [ ask end1
            [ -BIG-THEN-SMALL-1316 ]
        ask end2
            [ -BIG-THEN-SMALL-1315 ]
        add-link-behaviours-after 0 ( list task [ -THICK-465 ] )
        add-link-behaviours-after 1 ( list task [ -THIN-710 ] ) ]
                                                            ;output-print (word [my-id] of end2 " became " (ifelse-value new-active ["active"] ["inactive"]) " because of the " sign-of-link " link from " [my-id] of end1 " of cell-" [label] of ([my-cell] of end1))
end

to -DOWNSTREAM-CHANGE-601
                          ; Either update nodes at end of one of out links or all out links depending on value of the-option-one-downstream-change.
   ask one-of my-out-links
       [ add-link-behaviours-after 0 ( list task [ -INFLUENCE-LINK-END-WITH-LOGGING--36 ] ) ]
end

to -RUN-MICRO-STEP-202
                       ; Add a list of behaviours to another agent or set of agents.
   do-after ( 1 )
            task [ do-every ( the-intracellular-step )
                            task [ if ( ifelse-value ( the-reversible? ) [ my-fate != "Necrosis" ] [ my-fate = nobody ] )
                                      [ ask my-last-node
                                            [ -DOWNSTREAM-CHANGE-601 ] ] ] ]
end

to -PROLIFERATION-COUNT-77
                           ; Set an attribute, parameter, or Netlogo variable to a new value.
   if ( any? neighbors with [ not any? objects-here with [ kind = "Cell" ] ] )
      [ set the-proliferation-count
            the-proliferation-count + 1 ]
end

to -PROLIFERATION-COUNT-LIST--7
   if ( any? neighbors with [ not any? objects-here with [ kind = "Cell" ] ] )
      [ set the-proliferation-count-list
            replace-item ( my-mutation-group - 1 ) the-proliferation-count-list ( item ( my-mutation-group - 1 ) the-proliferation-count-list + 1 ) ]
end

to -RESET-FATE-145
                   ; Set an attribute, parameter, or Netlogo variable to a new value.
   if ( any? neighbors with [ not any? objects-here with [ kind = "Cell" ] ] )
      [ set my-fate
            nobody ]
end

to -TURN-QUIESCENCE-60
                       ; Set two attributes, parameters, or NetLogo variables to new values.
   if ( not any? neighbors with [ not any? objects-here with [ kind = "Cell" ] ] )
      [ set my-fate
            "Growth_Arrest"
        set my-growth-arrest-cycle
            3 ]
end

to -COPY-MUTATION-GROUP-180
                            ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-mutation-group
       [ my-mutation-group ] of myself
end

to -COPY-COLOR-207
                   ; Set an attribute, parameter, or Netlogo variable to a new value.
   set color
       [ color ] of myself
end

to -COPY-MUTATION-PROFILE-179
                              ; CHANGE TO MYSELF, SO THAT GENES ARE NOT EMPTY (NEW CELL)
   let genes
       table:keys [ my-table-of-mutations ] of myself
       ; let genes table:keys  my-table-of-mutations
   foreach ( genes )
           [ if ( table:has-key? [ my-table-of-mutations ] of myself ? ) [ table:put ( my-table-of-mutations ) ( ? ) ( table:get [ my-table-of-mutations ] of myself ?
                ) ] ]
                ;set my-table-of-mutations table:make
                ;let table-of-probability read-mutation-profile the-file-of-mutations my-mutation-group
                ;let genes table:keys  table-of-probability
                ;let rand-number random-float 1
                ;foreach (genes) [
                ;   let probability (table:get table-of-probability ?)
                ;   let active-status  ifelse-value(probability < 0)[-1][ifelse-value(rand-number < probability)[1][0]]
                ;   table:put (my-table-of-mutations) (?) active-status
                ;]
end

to -MOVE-TO-EMPTY-SLOT-3
   let empty-slots
       neighbors with [ not any? objects-here with [ kind = "Cell" ] ]
   move-to one-of empty-slots
end

to -HIDE-1816
              ; Set an attribute, parameter, or Netlogo variable to a new value.
   set hidden?
       true
end

to -HIDE-1815
              ; Set an attribute, parameter, or Netlogo variable to a new value.
   set hidden?
       true
end

to -HIDE-INCOMING-LINKS-1211
                             ; Add a list of behaviours to another agent or set of agents.
   ask my-in-links
       [ -HIDE-1815 ]
end

to -HIDE-1814
              ; Set an attribute, parameter, or Netlogo variable to a new value.
   set hidden?
       true
end

to -HIDE-OUTGOING-LINKS-1211
                             ; Add a list of behaviours to another agent or set of agents.
   ask my-out-links
       [ -HIDE-1814 ]
end

to -HIDE-MY-NODES-1274
                       ; Add a list of behaviours to another agent or set of agents.
   ask my-nodes
       [ -HIDE-1816
         -HIDE-INCOMING-LINKS-1211
         -HIDE-OUTGOING-LINKS-1211 ]
end

to -PROLIFERATE-878
   let just-created-agents
       nobody
       ; Create additional agents initialising them as if at set up time.
   let empty-neighbors
       ( neighbors with [ not any? objects-here with [ kind = "Cell" ] ] )
   if ( count all-of-kind "Cell" < the-maximum-cell-count and any? empty-neighbors )
      [
      ; The following code was generated by a call to create-agent.
 set just-created-agents
            nobody
        ask patch pxcor pycor zcor
            [ sprout-objects 1 [
                                 set just-created-agents
                                     ( turtle-set self just-created-agents )
                                 set kind
                                     "Cell" ] ]
        ask just-created-agents
            [ set xcor
                  xcor
              set ycor
                  ycor
              initialise-object
              initialise-previous-state ]
        ask just-created-agents
            [ kind-initialisation "Cell" ]
        ask just-created-agents
            [ -COPY-MUTATION-GROUP-180
              -COPY-COLOR-207
              -COPY-MUTATION-PROFILE-179
              -MOVE-TO-EMPTY-SLOT-3
              -HIDE-MY-NODES-1274 ] ]
end

to -PROLIFERATE-891
   do-after ( the-proliferation-delay )
            task [ do-every ( the-intercellular-step )
                            task [ if ( my-fate = "Proliferation" )
                                      [ -PROLIFERATION-COUNT-77
                                        -PROLIFERATION-COUNT-LIST--7
                                        -RESET-FATE-145
                                        -TURN-QUIESCENCE-60
                                        -PROLIFERATE-878 ] ] ]
end

to -GROWTH-ARREST-COUNT-69
                           ; Set an attribute, parameter, or Netlogo variable to a new value.
   if ( my-growth-arrest-cycle = 3 )
      [ set the-growth_arrest-count
            the-growth_arrest-count + 1 ]
end

to -GROWTH-ARREST-COUNT-LIST--12
   set the-growth_arrest-count-list
       replace-item ( my-mutation-group - 1 ) the-growth_arrest-count-list ( item ( my-mutation-group - 1 ) the-growth_arrest-count-list + 1 )
end

to -NETWORK-GROWTH-ARREST-COUNT-3
                                  ; Set two attributes, parameters, or NetLogo variables to new values.
   if ( my-network-decision? and my-growth-arrest-cycle = 3 )
      [ set the-network-growth_arrest-count
            the-network-growth_arrest-count + 1
        set my-network-decision?
            false ]
end

to -GROWTH-ARREST-CYCLE-258
                            ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-growth-arrest-cycle
       my-growth-arrest-cycle - 1
end

to -RESET-FATE-278
                   ; Reset only when the cell moves out of the growth_arrest phase
   if ( my-growth-arrest-cycle = 0 )
      [ set my-fate
            nobody ]
end

to -GROWTH-ARREST-16
   do-after ( the-proliferation-delay )
            task [ do-every ( the-intercellular-step )
                            task [ if ( my-fate = "Growth_Arrest" )
                                      [ -GROWTH-ARREST-COUNT-69
                                        -GROWTH-ARREST-COUNT-LIST--12
                                        -NETWORK-GROWTH-ARREST-COUNT-3
                                        -GROWTH-ARREST-CYCLE-258
                                        -RESET-FATE-278 ] ] ]
end

to -APOPTOSIS-COUNT-44
                       ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-apoptosis-count
       the-apoptosis-count + 1
end

to -APOPTOSIS-COUNT-LIST--1
   set the-apoptosis-count-list
       replace-item ( my-mutation-group - 1 ) the-apoptosis-count-list ( item ( my-mutation-group - 1 ) the-apoptosis-count-list + 1 )
end

to -DIE-2598
             ; Remove this agent from the model.
   set dead
       true
end

to -DIE-NODES-289
                  ; Add a list of behaviours to another agent or set of agents.
   ask my-nodes
       [ -DIE-2598 ]
end

to -DIE-2597
             ; Remove this agent from the model.
   set dead
       true
end

to -NECROSIS-COUNT-44
                      ; Set an attribute, parameter, or Netlogo variable to a new value.
   set the-necrosis-count
       ifelse-value ( not my-necrosis-counted? ) [ the-necrosis-count + 1 ] [ the-necrosis-count ]
end

to -NECROSIS-COUNT-LIST--1
   set the-necrosis-count-list
       replace-item ( my-mutation-group - 1 ) the-necrosis-count-list ( item ( my-mutation-group - 1 ) the-necrosis-count-list + 1 )
end

to -NECROSIS-COUNTED--1
                        ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-necrosis-counted?
       true
end

to -APOPTOSIS-NECROSIS-105
                           ; These behaviours are free to happen at any time point
   do-after ( 1 )
            task [ do-every ( the-apoptosis-step )
                            task [ if ( my-fate = "Apoptosis" )
                                      [ -APOPTOSIS-COUNT-44
                                        -APOPTOSIS-COUNT-LIST--1
                                        -DIE-NODES-289
                                        -DIE-2597 ]
                                   if ( my-fate = "Necrosis" )
                                      [ -NECROSIS-COUNT-44
                                        -NECROSIS-COUNT-LIST--1
                                        -NECROSIS-COUNTED--1 ] ] ]
end

to -CELL-ACTIONS-78
                    ; Add a list of behaviours
                    ; (a way to package up several behaviours into a single unit).
   -PROLIFERATE-891
   -GROWTH-ARREST-16
   -APOPTOSIS-NECROSIS-105
end

to -RANDOMLY-ACTIVE-73
                       ; Initially equally likely to be on or off.
   set my-active
       one-of [ true false ]
end

to -APPLY-MUTATION-5
   do-after ( 0.99 )
            task [ if ( table:has-key? ( [ my-table-of-mutations ] of my-cell ) my-id )
                      [ if ( table:get [ my-table-of-mutations ] of my-cell my-id = 0 )
                           [ set my-active
                                 false ]
                        if ( table:get [ my-table-of-mutations ] of my-cell my-id = 1 )
                           [ set my-active
                                 true ] ] ]
end

to -SHAPE-634
              ; Change the appearance to one of the defined shapes.
   set shape
       "circle"
end

to -COLOR-934
              ; Change the color of this agent.
   set color
       sky
end

to -SIZE-415
             ; Change size of this agent.
   do-after ( 0.99 )
            task [ set size
                       ifelse-value ( the-world-3D? ) [ ifelse-value my-active [ 0.75 ] [ 0.35 ] ] [ ifelse-value my-active [ 2 ] [ 1 ] ] ]
end

to -ACTIVATION-THRESHOLD-4
                           ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-activation-threshold
       item 1 ( table:get the-table-of-input-parameters my-id )
end

to -INACTIVE-8
               ; delayed, so world prototype can run first
   set my-active
       0
end

to -CONSUMPTION-3
   set my-consumed?
       false
end

to -SHAPE-636
              ; Change the appearance to one of the defined shapes.
   set shape
       "square"
end

to -COLOR-936
              ; Change the color of this agent.
   set color
       pink
end

to -SIZE-512
             ; Change size of this agent.
   set size
       ifelse-value ( the-world-3D? ) [ 0.35 ] [ 1 ]
end

to -INACTIVE-1
               ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-active
       false
end

to -SHAPE-172
              ; Change the appearance to one of the defined shapes.
   set shape
       "square"
end

to -COLOR-937
              ; Change the color of this agent.
   set color
       orange
end

to -SIZE-413
             ; Change size of this agent.
   set size
       ifelse-value ( the-world-3D? ) [ ifelse-value my-active [ 0.75 ] [ 0.35 ] ] [ ifelse-value my-active [ 2 ] [ 1 ] ]
end

to -INACTIVE-5
               ; Set an attribute, parameter, or Netlogo variable to a new value.
   set my-active
       false
end

to -GLOBAL-TABLES-18
   set the-table-of-substances
       table:make
   set the-table-of-inputs
       table:make
   let input-list
       [ ]
   ask one-of objects with [ kind = "Cell" ]
       [ set input-list
             [ my-id ] of objects with [ kind = "Input" ] ]
   foreach ( input-list ) [ table:put the-table-of-inputs ? item 0 ( table:get the-table-of-input-parameters ? ) ]
   set the-substances
       table:keys the-table-of-diffusion-parameters
   foreach ( the-substances ) [ table:put the-table-of-substances ( ? ) first ( table:get the-table-of-diffusion-parameters ? ) ]
end

to -NUMERICAL-COEFFICIENTS-3
   set the-dx
       the-cell-size * ( 2 * the-sparse-grid + 1 )
       ; cells that fit in a diffusion patch
   set the-numerical-dc
       table:make
   set the-numerical-dc-factor
       table:make
   let fastest-diffusing-substance
       ""
   let biggest-dc
       0
   foreach ( the-substances )
           [ if ( item 2 ( table:get the-table-of-diffusion-parameters ? ) >= biggest-dc )
                [ set biggest-dc
                      item 2 ( table:get the-table-of-diffusion-parameters ? )
                  set fastest-diffusing-substance
                      ? ] ]
   set the-dt
       ifelse-value ( biggest-dc > 0 ) [ ( 0.1 * the-dx ^ 2 ) / biggest-dc ] [ 1 ]
       ; if there are no diffusables, this time step has no meaning
   foreach ( the-substances )
           [ if ( ? = fastest-diffusing-substance ) [ table:put the-numerical-dc ? 0.1 ]
             if ( ? != fastest-diffusing-substance ) [ table:put the-numerical-dc ? the-dt * item 2 ( table:get the-table-of-diffusion-parameters ? ) / the-dx ^ 2
                ] table:put the-numerical-dc-factor ? 1 - ifelse-value ( the-world-3D? ) [ 6 ] [ 4 ] * table:get the-numerical-dc ? ]
                ; oxygen specific parameters
   set the-optimal-oxygen
       0.28
       ; caused an error when oxygen was not associated with any parameter
       ;set the-necrosis-threshold-f (item 1 table:get the-table-of-input-parameters (table:get the-table-of-associations "Oxygen")) * 0.8 ; this is two parameters multiplied
   if ( table:get the-table-of-associations "Oxygen" != "" )
      [ set the-necrosis-threshold-f
            ( item 1 table:get the-table-of-input-parameters ( table:get the-table-of-associations "Oxygen" ) ) * 0.8
            ; this is two parameters multiplied
 ]
   if ( table:get the-table-of-associations "Oxygen" = "" )
      [ set the-necrosis-threshold-f
            0.016 ]
            ; in this case this number is not going to be used
   set the-old-oxygen-list
       [ ]
   foreach sort patches
           [ set the-old-oxygen-list
                 lput ( [ oxygen-of-patch ] of ? ) the-old-oxygen-list ]
end

to -INPUTS-OF-PATCH-27
   set inputs-of-patch
       table:make
   let keys
       table:keys the-table-of-inputs
   foreach ( keys ) [ table:put ( inputs-of-patch ) ( ? ) ( table:get the-table-of-inputs ? ) ]
end

to -SUBSTANCES-OF-PATCH-16
   set substances-of-patch
       table:make
   let keys
       table:keys the-table-of-substances
   foreach ( keys ) [ table:put ( substances-of-patch ) ( ? ) ( table:get the-table-of-substances ? ) ]
end

to -TEMP-SUBSTANCES-10
                       ; To be used by the recursive formula in the diffusion process
   set temp-substances-of-patch
       table:make
   let keys
       table:keys the-table-of-substances
   foreach ( keys ) [ table:put ( temp-substances-of-patch ) ( ? ) ( table:get the-table-of-substances ? ) ]
end

to -PRODUCTION-OF-PATCH-28
   set production-of-patch
       table:make
   foreach ( the-substances ) [ table:put ( production-of-patch ) ( ? ) 0 ]
end

to -CONSUMPTION-OF-PATCH-4
                           ; Set an attribute, parameter, or Netlogo variable to a new value.
   set consumption-of-patch
       0
end

to -SPARSE-NEIGHBORS-OF-PATCH-12
   set sparse-neighbor-of-patch
       nobody
   if ( central-patch? )
      [ set sparse-neighbor-of-patch
            sparse-neighbors the-sparse-grid ]
end

to -SET-NEIGHBORHOOD-1
   set members-of-patch
       nobody
   if ( central-patch? )
      [ set members-of-patch
            neighbors-n the-sparse-grid ]
end

to -SET-MICRO-ENVIRONMENT-61
                             ; These are new copies of the global tables
   ask patches with [ true ]
       [ -INPUTS-OF-PATCH-27
         -SUBSTANCES-OF-PATCH-16
         -TEMP-SUBSTANCES-10
         -PRODUCTION-OF-PATCH-28
         -CONSUMPTION-OF-PATCH-4
         -SPARSE-NEIGHBORS-OF-PATCH-12
         -SET-NEIGHBORHOOD-1 ]
end

to -CONSUMPTION-OF-PATCH-46
   let n-cell
       0
   set consumption-of-patch
       0
   ask members-of-patch
       [
       ; this function includes the patch that calls it
 ask objects-here with [ kind = "Cell" ]
             [ set n-cell
                   n-cell + 1
               if ( my-fate = "Growth_Arrest" )
                  [ set n-cell
                        n-cell - 0.5 ]
               if ( my-fate = "Necrosis" )
                  [ set n-cell
                        n-cell - 1 ] ] ]
   set consumption-of-patch
       n-cell
end

to -PRODUCTION-OF-PATCH-32
   let n-cell
       0
   let n-growth-arrest
       0
   let n-necrosis
       0
   foreach ( the-substances )
           [
           ; note if no substances defined by the user, there is no autocrine signalling too.
 if ( ? != "Oxygen" )
                [ set n-cell
                      0
                  set n-growth-arrest
                      0
                  set n-necrosis
                      0
                  ask members-of-patch
                      [ ask objects-here with [ kind = "Cell" ]
                            [ set n-cell
                                  n-cell + ifelse-value ( first [ my-active ] of my-nodes with [ my-id = ? ] ) [ 1 ] [ 0 ]
                              set n-growth-arrest
                                  n-growth-arrest + ifelse-value ( my-fate = "Growth_Arrest" and first [ my-active ] of my-nodes with [ my-id = ? ] ) [ 1 ] [ 0 ]
                              set n-necrosis
                                  n-necrosis + ifelse-value ( my-fate = "Necrosis" and first [ my-active ] of my-nodes with [ my-id = ? ] ) [ 1 ] [ 0 ]
                              ask my-nodes with [ my-id = ? ]
                                  [ set my-active
                                        false ]
                                        ; switch off activated output nodes
 ] ] table:put production-of-patch ? ( n-cell - 0.5 * n-growth-arrest - n-necrosis ) ] ]
end

to -PROPERTIES-OF-SPARSE-PATCHES-32
                                    ; Diffusion happens during this time-scale
   do-after ( 1.03 )
            task [ do-every ( the-diffusion-step )
                            task [ if ( not empty? the-substances )
                                      [ ask patches with [ ( pxcor ) mod ( 2 * the-sparse-grid + 1 ) = 0 and ( pycor ) mod ( 2 * the-sparse-grid + 1 ) = 0 and ( pzcor
                                            ) mod ( 2 * the-sparse-grid + 1 ) = 0 ]
                                            [ -CONSUMPTION-OF-PATCH-46
                                              -PRODUCTION-OF-PATCH-32 ] ] ] ]
end

to -DIRICHLET-BC-130
                     ; Boundary conditions
   if ( boundary-patch? )
      [ let keys
            table:keys the-table-of-substances
        foreach ( keys ) [ table:put ( substances-of-patch ) ( ? ) item 1 ( table:get the-table-of-diffusion-parameters ? )
                ; BC is 2nd element in list!
 ]
        foreach ( keys ) [ table:put ( temp-substances-of-patch ) ( ? ) item 1 ( table:get the-table-of-diffusion-parameters ? )
                ; BC is 2nd element in list!
 ] ]
end

to -SDIFFUSE-SUBSTANCES-OPT--9
   if ( not boundary-patch? )
      [ if ( central-patch? )
           [
           ; centre of a neighbourhood
 foreach ( the-substances )
                     [ if ( ? = "Oxygen" ) [ table:put temp-substances-of-patch ? table:get the-numerical-dc-factor "Oxygen" * ( table:get substances-of-patch "Oxygen" ) +
                          table:get the-numerical-dc "Oxygen" * sum [ table:get substances-of-patch "Oxygen" ] of sparse-neighbor-of-patch - item 3 ( table:get the-table-of-diffusion-parameters "Oxygen"
                          ) * consumption-of-patch * ( ( table:get substances-of-patch "Oxygen" ) - the-necrosis-threshold-f ) / ( the-optimal-oxygen - the-necrosis-threshold-f )
                          ; consumption terms
 ]
                       if ( ?
                          != "Oxygen" ) [ table:put temp-substances-of-patch ? table:get the-numerical-dc-factor ? * ( table:get substances-of-patch ? ) + table:get the-numerical-dc
                          ? * sum [ table:get substances-of-patch ? ] of sparse-neighbor-of-patch - item 3 ( table:get the-table-of-diffusion-parameters ? ) * consumption-of-patch *
                          ( table:get substances-of-patch ? ) + item 4 ( table:get the-table-of-diffusion-parameters ? ) * table:get production-of-patch ? ] ] ] ]
end

to -UPDATE-TABLES-OF-PATCH-V3-11
   let local-concentration
       0
   let key
       nobody
   if ( central-patch? )
      [ foreach ( the-substances )
                [ set local-concentration
                      table:get temp-substances-of-patch ? table:put substances-of-patch ? local-concentration
                  ask members-of-patch [ table:put substances-of-patch ? local-concentration ] ] ]
   foreach ( the-substances )
           [ set key
                 table:get the-table-of-associations ?
             if ( table:has-key? inputs-of-patch key ) [ table:put ( inputs-of-patch ) ( key ) ( table:get substances-of-patch ? ) ] ]
end

to -SPARSE-DIFFUSION-47
                        ; Diffusion happens during this time-scale
   do-after ( 1.04 )
            task [ do-every ( the-diffusion-step )
                            task [ if ( not empty? the-substances )
                                      [ ask patches with [ true ]
                                            [ -DIRICHLET-BC-130
                                              -SDIFFUSE-SUBSTANCES-OPT--9
                                              -UPDATE-TABLES-OF-PATCH-V3-11 ] ] ] ]
end

to -LABEL-WITH-ID-5
                    ; Set an attribute, parameter, or Netlogo variable to a new value.
   set label
       my-id
end

to -LABEL-NODES-6
                  ; Add a list of behaviours to another agent or set of agents.
   ask my-nodes
       ;objects with [kind = "Gene" or kind = "Input" or kind = "Output"]

       [ -LABEL-WITH-ID-5 ]
end

to -DISTINGUISH-INPUT-AND-OUTPUT-13
                                    ; Sorts the nodes into input (no incoming links), output (no outgoing links), and the rest (genes).
   ask my-nodes
       [ set kind
             "Gene" ]
             ; all nodes begin as genes
   ask my-nodes with [ not any? my-in-links = 0 and not any? my-out-links ]
       [ die ]
   ask my-nodes with [ not any? my-in-links ]
       [ set kind
             "Input" ]
   ask my-nodes with [ not any? my-out-links ]
       [ set kind
             "Output" ]
   ask my-nodes with [ not any? my-out-links and ( my-shape = "rect" ) ]
       [ set kind
             "Output-Fate" ]
end

to -PROCESS-MY-RULE-16
                       ; turns the rule from the html file into an executable netlogo command
   ask my-nodes
       [ if ( my-rule = 0 )
            [ set my-rule
                  "" ]
                  ; The rule is processed multiple times when the cell label is higher than the maximum-cell-count without this conditional
         let rule-processed
             ( string-starts-with? my-rule "(active-of" ) or ( string-starts-with? my-rule "active-of" ) or ( string-starts-with? my-rule "not active-of" ) or ( string-starts-with?
             my-rule "not (active-of" )
         if ( not rule-processed )
            [ set my-rule
                  add-active-of-to-rule my-rule ] ]
                  ; OLD MODULE USING THE STRING LIBRARY
                  ;ask my-nodes [
                  ;    if (my-rule = 0)[
                  ;        set my-rule ""
                  ;    ]
                  ;    ; The rule is processed multiple times when the cell label is higher than the maximum-cell-count without this conditional
                  ;    let rule-processed my-rule string:starts-with? "(active-of" or my-rule string:starts-with? "active-of"
                  ;                    or my-rule string:starts-with? "not active-of" or my-rule string:starts-with? "not (active-of"
                  ;
                  ;    if (not rule-processed) [
                  ;        set my-rule string:rex-replace-all "((?!and|or|not\\b)\\b\\w+)" my-rule "active-of \"$1\""
                  ;    ]
                  ;]
end

to -PROCESS-MY-PARAMETER-7
   set my-list-of-parameters
       ( word my-list-of-parameters my-parameter )
end

to -RED-7
          ; Change the color of this agent.
   set color
       red
end

to -NEGATIVE-LINKS-ARE-RED-6
                             ; Add a list of behaviours to another agent or set of agents.
   ask links with [ sign-of-link = "negative" and cell-of-link = myself ]
       [ -RED-7 ]
end

to -GREEN-158
              ; Change the color of this agent.
   set color
       green
end

to -POSITIVE-LINKS-ARE-GREEN-9
                               ; Add a list of behaviours to another agent or set of agents.
   ask links with [ sign-of-link = "positive" and cell-of-link = myself ]
       [ -GREEN-158 ]
end

to -INITIALISE-GENES-8
                       ; The genes are made by loading the GraphML file -- this initialises them
   ask my-nodes with [ kind = "Gene" ]
       [ -RANDOMLY-ACTIVE-73
         -APPLY-MUTATION-5
         -SHAPE-634
         -COLOR-934
         -SIZE-415 ]
end

to -INITIALISE-INPUT-NODES-3
                             ; The nodes are made by loading the GraphML file -- this initialises them
   ask my-nodes with [ kind = "Input" ]
       [ -ACTIVATION-THRESHOLD-4
         -INACTIVE-8
         -CONSUMPTION-3
         -SHAPE-636
         -COLOR-936
         -SIZE-512 ]
end

to -INITIALISE-OUTPUT-NODES-3
                              ; The nodes are made by loading the GraphML file -- this initialises them
   ask my-nodes with [ kind = "Output" ]
       [ -INACTIVE-1
         -SHAPE-172
         -COLOR-937
         -SIZE-413 ]
end

to -INITIALISE-OUTPUT-FATE-3
                             ; Add a list of behaviours to another agent or set of agents.
   ask my-nodes with [ kind = "Output-Fate" ]
       [ -INACTIVE-5 ]
end

to -HIDE-30
            ; Set an attribute, parameter, or Netlogo variable to a new value.
   set hidden?
       true
end

to -HIDE-NODES-49
                  ; Add a list of behaviours to another agent or set of agents.
   ask objects with [ kind = "Gene" or kind = "Input" or kind = "Output" or kind = "Output-Fate" ]
       [ -HIDE-30 ]
end

to -HIDE-28
            ; Set an attribute, parameter, or Netlogo variable to a new value.
   set hidden?
       true
end

to -HIDE-LINKS-13
                  ; Add a list of behaviours to another agent or set of agents.
   ask links
       [ -HIDE-28 ]
end

to -HIDE-NETWORKS-19
                     ; Add a list of behaviours
                     ; (a way to package up several behaviours into a single unit).
   -HIDE-NODES-49
   -HIDE-LINKS-13
end

to -ACTIVATION-PROFILE-3
                         ; Set an attribute, parameter, or Netlogo variable to a new value.
   do-every ( the-intercellular-step )
            task [ set the-activation-profile
                       state-of-nodes all-of-kind "Cell" ]
end

to-report update-attributes
  report false
end

to initialise-patch-attributes
 set log-patch-attributes []
end

to initialise-globals [globals-not-to-be-initialised]
 if not member? "the-replicates-remaining" globals-not-to-be-initialised
  [set the-replicates-remaining 1
  ]
 if not member? "the-cell-events-file-name" globals-not-to-be-initialised
  [set the-cell-events-file-name (word "log" random 10000000000 ".html")
  ]
 if not member? "the-apoptosis-count" globals-not-to-be-initialised
  [set the-apoptosis-count 0
  ]
 if not member? "the-proliferation-count" globals-not-to-be-initialised
  [set the-proliferation-count 0
  ]
 if not member? "the-growth_arrest-count" globals-not-to-be-initialised
  [set the-growth_arrest-count 0
  ]
 if not member? "the-optimal-oxygen" globals-not-to-be-initialised
  [set the-optimal-oxygen 0.28
  ]
 if not member? "the-steady-state?" globals-not-to-be-initialised
  [set the-steady-state? false
  ]
 if not member? "the-steady-state-accuracy" globals-not-to-be-initialised
  [set the-steady-state-accuracy 1.0e-10
  ]
 if not member? "the-growth-arrest-cycle" globals-not-to-be-initialised
  [set the-growth-arrest-cycle 3
  ]
 if not member? "the-fraction-of-hypoxic-threshold" globals-not-to-be-initialised
  [set the-fraction-of-hypoxic-threshold 0.8
  ]
 if not member? "the-batch-mode?" globals-not-to-be-initialised
  [set the-batch-mode? false
  ]
 if not member? "the-reversible?" globals-not-to-be-initialised
  [set the-reversible? true
  ]
 set update-patch-attributes-needed false
end

to update-patch-attributes
end

to-report update-turtle-state
 report false
end

to initialise-previous-state
end

to update-all-turtle-states
end

to initialise-attributes
end

; The following are NetLogo library procedures and reporters used by the BehaviourComposer
; New BSD license
; See http://modelling4all.org
; Authored by Ken Kahn; Last updated 13 Feb 2015





to start [globals-not-to-be-initialised]
 initialise globals-not-to-be-initialised
 the-model globals-not-to-be-initialised
 finish-setup
 create-pens 1 ; for drawing lines
 ask pens [hide-turtle]
end

to setup
  setup-except []
end

to setup-except [globals-not-to-be-initialised]
 start globals-not-to-be-initialised
 set total-time 0
 if go-until (delta-t - .000001) []  ; ignore result
 ask objects [initialise-previous-state]
end

to initialise [globals-not-to-be-initialised]
 let saved-global-values map runresult globals-not-to-be-initialised
 if-else maximum-plot-generations > 0
    [if-else plot-generation <= maximum-plot-generations
        [let next-plot-generation plot-generation + 1
         ; clear all but plots and output
         clear-patches
         clear-drawing
         clear-turtles
         clear-globals
         set plot-generation next-plot-generation]
        [clear-all
         set plot-generation 0]]
    [clear-all]
 ;; restore the value of any variables in globals-not-to-be-initialised
 let i 0
 while [i < length globals-not-to-be-initialised]
       [let variable item i globals-not-to-be-initialised
        let value item i saved-global-values
        if (not is-number? value and not is-boolean? value and not is-list? value) [set value (word "\"" value "\"")]
        run (word "set " variable " " value)
        set i i + 1]
 reset-timer
 set time -1
 set times-scheduled []
 set behind-schedule 0
 set plotting-commands []
 set histogram-plotting-commands []
 set button-command ""
 set radian 57.29577951308232
 set need-to-clear-drawing false
 set observer-commands []
 set stop-running false
 if delta-t = 0 [set delta-t 1] ; give default value if none given
 if frame-duration = 0 [set frame-duration delta-t]
 if world-geometry = 0 [set world-geometry 1]
 ask-every-patch task [initialise-patch-attributes]
 reset-ticks
end

to initialise-object
 set scheduled-behaviours []
 set current-behaviours []
 set behaviour-removals []
 set rules []
 set dead false
 initialise-attributes
end

to finish-setup
 ; faster than ask objects since doesn't shuffle
 set objects-with-something-to-do objects
 let ignore1 objects with [update-attributes]
 ask objects with [rules != []] [run-rules]
 update-all-turtle-states
 set time 0
end

to go
 reset-timer ; reset timer so pause and resume don't have leftover time
 if go-until -1
    [set stop-running false ; so it can be started up again
     stop]
    set total-time total-time + timer
end

to setup-only-if-needed
  if times-scheduled = 0 [setup]
end

to-report go-until [stop-time]
 ; this is run by the 'go' button and runs the scheduled events and updates the turtle states and plots
 setup-only-if-needed
 if observer-commands != []
    [run-observer-commands]
 if-else times-scheduled = []
   ; following uses a hack to avoid the overhead of ask shuffling the agent set
   [set objects-with-something-to-do objects with [rules != []]
    ask objects-with-something-to-do [run-rules] ; nothing scheduled but rules may be triggered by time
    ; rules may have added behaviours or set 'dead' so can't re-use objects-with-something-to-do
    ask objects [finish-tick]
    if observer-commands != []
       [run-observer-commands]
    set time time + frame-duration]
   [if-else time <= 0
      [set cycle-finish-time first times-scheduled]
      [set cycle-finish-time cycle-finish-time + frame-duration]
     if stop-time > 0 [set cycle-finish-time stop-time]
     while [times-scheduled != [] and first times-scheduled <= cycle-finish-time]
       [; nothing happening so skip ahead to next event
        set time first times-scheduled
        set times-scheduled but-first times-scheduled
        set objects-with-something-to-do objects with [scheduled-behaviours != [] or rules != []]
        ask objects-with-something-to-do [start-tick]
        ; above may have added behaviours or set 'dead' so can't re-use objects-with-something-to-do
        ask objects [finish-tick]
        if observer-commands != []
           [run-observer-commands]
        if need-to-clear-drawing
           [clear-drawing
            set need-to-clear-drawing false]]]
 if observer-commands != []
    [run-observer-commands]
 update-all-turtle-states
 if update-patch-attributes-needed [ask-every-patch task [update-patch-attributes]]
 tick-advance time - ticks
 run-plotting-commands
 report not any? objects = 0 or stop-running or (stop-time > 0 and time >= stop-time)
end

to run-observer-commands
  let commands observer-commands
  set observer-commands []
  ; run each command without ANY commands pending
  forEach commands [run ?]
end

to run-plotting-commands
 forEach plotting-commands [if is-agent? first ? [ask first ? [update-plot item 1 ? runresult item 2 ? runresult item 3 ?]]]
 forEach histogram-plotting-commands [if is-agent? first ? [ask first ? [update-histogram item 1 ? item 2 ? item 3 ?]]]
end

to update-plot [name-of-plot x y]
 if time >= 0
  [set-current-plot name-of-plot
   plotxy x y]
end

to update-histogram [name-of-plot population-reporter value-reporter]
 if time >= 0
  [set-current-plot name-of-plot
   histogram [runresult value-reporter] of runresult population-reporter]
end

;; behaviours are represented by a list:
;; scheduled-time behaviour-name
;; behaviours are kept in ascending order of the scheduled-time

to add-link-behaviours-after [delay behaviours]
 add-link-behaviours behaviours time + delay
end

to add-link-behaviours [behaviours when-to-add]
 foreach behaviours [add-link-behaviour ? when-to-add]
end

to add-link-behaviour [name when-to-add]
 ; links don't have their own schedule
 ; instead they use the agent at the "other end"
 let this-link self
 ask other-end [add-behaviour-to-link this-link name when-to-add]
end

to add-behaviour-to-link [this-link name when-to-add]
 ; save current-behaviour in case this was called by a behaviour that isn't finished
 let saved-current-behaviour current-behaviour
 let full-name (list name this-link)
 if-else when-to-add <= time
    [set current-behaviour (list maximum 0 when-to-add full-name)
     run-procedure full-name
     set current-behaviour saved-current-behaviour]
    [insert-behaviour when-to-add (list full-name)]
end

to remove-behaviour-now [name]
 set scheduled-behaviours remove-behaviour-from-list name scheduled-behaviours
end

to do-every [interval actions]
 ; does it now and schedules the next occurrence interval ticks in the future
 ; schedules first in case action updates the current-behaviour variable
 if-else not is-number? interval or interval <= 0
   [user-message (word "Can only repeat something a positive number of times. Not " interval " " actions)]
   [if-else time < 0
      [insert-behaviour 0 (list (list actions interval))]
      [do-every-internal interval actions]]
end

to do-every-internal [interval actions]
 insert-behaviour time + interval (list (list actions interval))
 run-procedure actions
end

to do-every-dynamic [interval-reporter actions]
 insert-behaviour time + run-result interval-reporter (list (list actions interval-reporter))
 run-procedure actions
end

to do-after [duration actions]
 ; schedules this duration ticks in the future
 if-else is-list? current-behaviour
    ; from the time this event was scheduled to run; not necessarily the current time
    [do-at-time first current-behaviour + duration actions]
    [if-else time > 0
       [do-at-time time + duration actions]
       [do-at-time duration actions]]
end

to do-at-time [scheduled-time actions]
 if-else scheduled-time <= time
   [run actions]
   [insert-behaviour scheduled-time (list actions)]
end

to start-tick
 set behaviours-at-tick-start scheduled-behaviours
 set current-behaviours scheduled-behaviours
 set scheduled-behaviours []
 while [current-behaviours != []]
       [let simulation-time first first current-behaviours
        if-else simulation-time > time
          [set scheduled-behaviours merge-behaviours scheduled-behaviours current-behaviours
           set current-behaviours []] ; stop this round
          [set current-behaviour first current-behaviours
           forEach but-first current-behaviour run-procedure
           set current-behaviour 0
           ; procedure may have reset current-behaviours to []
           if current-behaviours != []
              [set current-behaviours but-first current-behaviours]]]
 if rules != [] [run-rules]
 if behaviour-removals != []
    [forEach behaviour-removals
        [ask first ? [remove-behaviour-now item 1 ?]]
     set behaviour-removals []]
end

to finish-tick
 ; this should happen after all objects have run start-tick
 let ignore update-attributes
 if dead [die]
end

to-report all-of-kind [kind-name]
 report objects with [kind = kind-name]
end

to when [condition action]
 set rules fput (list condition action false) rules
end

to run-rules
 let current-rules rules
 set rules []
 ; so can remove a rule below while still going down the list
 ;; could add error handling below
 forEach current-rules
    [if-else runresult first ?
       [run first but-first ?
        if item 2 ?
           ; is a 'whenever' rule so put it back on the list of rules
           [set rules fput ? rules]]
       [set rules fput ? rules]]
end

to insert-behaviour [scheduled-time rest-of-behaviour]
 ; inserts in schedule keeping it sorted by scheduled time
 set times-scheduled insert-ordered scheduled-time times-scheduled
 set scheduled-behaviours insert-behaviour-in-list scheduled-time rest-of-behaviour scheduled-behaviours
end

to-report insert-ordered [new-time times]
  if-else member? new-time times
    [report times]
    [report sort fput new-time times]
end

to-report insert-behaviour-in-list [scheduled-time rest-of-behaviour behaviours]
 ; recursive version took 10% longer
 let earlier-behaviours []
 while [behaviours != []]
    [let current-time first first behaviours
      if current-time = scheduled-time
        [let new-behaviour lput first rest-of-behaviour first behaviours
          report sentence earlier-behaviours fput new-behaviour but-first behaviours]
      if current-time > scheduled-time
        [report sentence earlier-behaviours fput fput scheduled-time rest-of-behaviour behaviours]
     set earlier-behaviours lput first behaviours earlier-behaviours
     set behaviours but-first behaviours]
 report sentence earlier-behaviours (list fput scheduled-time rest-of-behaviour)
end

to-report remove-behaviour-from-list [procedure-name behaviours]
 report map [remove-behaviour-from-behaviours-at-time-t procedure-name ?] behaviours
end

to-report remove-behaviour-from-behaviours-at-time-t [procedure-name behaviours-at-time-t]
 forEach but-first behaviours-at-time-t ; first is the time -- skip that
   [if equivalent-micro-behaviour? (ifelse-value is-list? ? [first ?] [?]) procedure-name
      [report remove ? behaviours-at-time-t]]
 report behaviours-at-time-t
end

to-report equivalent-micro-behaviour? [task-1 task-2]
 if (task-1 = task-2) [report true]
 ; different copies of the same micro-behaviour are equivalent for removals
 let serial-number-length 6
 let task-description-1 (word task-1)
 ; need to obtain the procedure name of the task by extracting it from print format
 ; ignore first 30 characters, serial number, and final parenthesis
 if (length task-description-1 - (serial-number-length + 1) <= 30) [report false]
 let name-1 substring task-description-1 30 (length task-description-1 - (serial-number-length + 1))
 let name-2 0
 if-else (is-string? task-2)
   ; older way was to use strings rather than tasks
   [set name-2 substring task-2 0 (length task-2 - serial-number-length)]
   [let task-description-2 (word task-2)
    if (length task-description-2 - (serial-number-length + 1) <= 30) [report false]
    set name-2 substring task-description-2 30 (length task-description-2 - (serial-number-length + 1))]
 report name-1 = name-2
end

to remove-behaviours [behaviours]
 forEach behaviours [remove-behaviour ?]
end

to remove-behaviour [name]
  set behaviour-removals fput (list self name) behaviour-removals
end

to-report merge-behaviours [behaviours1 behaviours2]
 ; both lists are already sorted
 if behaviours1 = [] [report behaviours2]
 if behaviours2 = [] [report behaviours1]
 if-else first first behaviours1 < first first behaviours2
   [report fput first behaviours1 merge-behaviours but-first behaviours1 behaviours2]
   [report fput first behaviours2 merge-behaviours behaviours1 but-first behaviours2]
end

to-report maximum [n1 n2]
 if-else n1 > n2
   [report n1]
   [report n2]
end

to ask-every-patch [procedure-name]
 ; a hack but faster since doesn't randomise the patches as ask does
 let ignore patches with [run-false procedure-name]
end

to-report run-false [procedure-name]
 run procedure-name
 report false
end

to set-world-geometry [code]
 set world-geometry code
end

to-report list-to-agentset [agent-list]
 ; deprecated but kept for backwards compatibility
 report turtle-set agent-list
end

to run-procedure [name]
 if-else is-list? name
    [let target-or-frequency item 1 name
     if-else is-number? target-or-frequency
        [do-every-internal target-or-frequency first name]
        [if-else is-agent? target-or-frequency
            [ask target-or-frequency [run first name]]
            [do-every-dynamic target-or-frequency first name] ]]
    [run name]
end

to run-in-observer-context [command]
  set observer-commands fput command observer-commands
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
245
294
10
10
10.0
1
10
1
1
1
0
1
1
1
-10
10
-10
10
-10
10
1
0
1
time
30.0

BUTTON
5
5
66
40
SETUP
setup
NIL
1
T
OBSERVER
NIL
S
NIL
NIL
1

BUTTON
5
45
66
80
GO
go
T
1
T
OBSERVER
NIL
G
NIL
NIL
1

BUTTON
5
85
68
118
PAUSE
set stop-running true
NIL
1
T
OBSERVER
NIL
.
NIL
NIL
1

TEXTBOX
1057
23
1177
52
-- Cell setup --
13
0.0
1

SLIDER
1053
53
1360
86
the-maximum-cell-count
the-maximum-cell-count
1
5000
4000
1
1
NIL
HORIZONTAL

TEXTBOX
1050
182
1151
203
-- Mutations --
13
0.0
1

INPUTBOX
1049
203
1360
263
the-file-of-mutations
mutations.txt
1
0
String

TEXTBOX
1050
594
1173
624
-- Input file --
13
0.0
1

INPUTBOX
1046
619
1188
679
the-input-parameters-file
input-parameters.txt
1
0
String

TEXTBOX
1053
415
1202
440
-- Diffusion --
13
0.0
1

INPUTBOX
1050
441
1192
501
the-diffusion-parameters-file
diffusion-parameters.txt
1
0
String

TEXTBOX
1050
298
1293
318
-- Associations --
13
0.0
1

INPUTBOX
1048
319
1190
379
the-associations-file
associations.txt
1
0
String

SLIDER
1444
254
1670
287
the-cell-size
the-cell-size
10
200
100
1
1
μm
HORIZONTAL

SLIDER
1442
54
1668
87
the-intercellular-step
the-intercellular-step
1
100000
100
1
1
s
HORIZONTAL

SLIDER
1442
90
1668
123
the-intracellular-step
the-intracellular-step
1
10000
1
1
1
s
HORIZONTAL

SLIDER
1442
126
1668
159
the-diffusion-step
the-diffusion-step
1
1000
1
1
1
s
HORIZONTAL

SLIDER
1443
209
1669
242
the-sparse-grid
the-sparse-grid
0
5
1
0.01
1
s
HORIZONTAL

SLIDER
1054
105
1359
138
the-initial-cell-count
the-initial-cell-count
1
100
50
1
1
NIL
HORIZONTAL

OUTPUT
0
256
324
304
12

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

circle
false
0
Circle -7500403 true true 0 0 300

square
false
0
Rectangle -7500403 true true 30 30 270 270

@#$#@#$#@
NetLogo 3D 5.3.1
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180

@#$#@#$#@
0
@#$#@#$#@
